// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ontology.proto

package ontology

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _ontology_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Ontology with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ontology) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ontology with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OntologyMultiError, or nil
// if none found.
func (m *Ontology) ValidateAll() error {
	return m.validate(true)
}

func (m *Ontology) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OntologyValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.WorkspaceId != nil {

		if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
			err = OntologyValidationError{
				field:  "WorkspaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.Source != nil {
		// no validation rules for Source
	}

	if m.DownloadUrl != nil {
		// no validation rules for DownloadUrl
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoUrl != nil {
		// no validation rules for LogoUrl
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return OntologyMultiError(errors)
	}

	return nil
}

func (m *Ontology) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologyMultiError is an error wrapping multiple validation errors returned
// by Ontology.ValidateAll() if the designated constraints aren't met.
type OntologyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyMultiError) AllErrors() []error { return m }

// OntologyValidationError is the validation error returned by
// Ontology.Validate if the designated constraints aren't met.
type OntologyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyValidationError) ErrorName() string { return "OntologyValidationError" }

// Error satisfies the builtin error interface
func (e OntologyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntology.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyValidationError{}

// Validate checks the field values on OntologySummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OntologySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologySummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologySummaryMultiError, or nil if none found.
func (m *OntologySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OntologySummaryValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.WorkspaceId != nil {

		if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
			err = OntologySummaryValidationError{
				field:  "WorkspaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.DownloadUrl != nil {
		// no validation rules for DownloadUrl
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoUrl != nil {
		// no validation rules for LogoUrl
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return OntologySummaryMultiError(errors)
	}

	return nil
}

func (m *OntologySummary) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologySummaryMultiError is an error wrapping multiple validation errors
// returned by OntologySummary.ValidateAll() if the designated constraints
// aren't met.
type OntologySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologySummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologySummaryMultiError) AllErrors() []error { return m }

// OntologySummaryValidationError is the validation error returned by
// OntologySummary.Validate if the designated constraints aren't met.
type OntologySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologySummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologySummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologySummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologySummaryValidationError) ErrorName() string { return "OntologySummaryValidationError" }

// Error satisfies the builtin error interface
func (e OntologySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologySummaryValidationError{}

// Validate checks the field values on OntologyCreation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OntologyCreation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyCreation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyCreationMultiError, or nil if none found.
func (m *OntologyCreation) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyCreation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
		err = OntologyCreationValidationError{
			field:  "WorkspaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLabel()); l < 1 || l > 255 {
		err := OntologyCreationValidationError{
			field:  "Label",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSource()) < 1 {
		err := OntologyCreationValidationError{
			field:  "Source",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.DownloadUrl != nil {
		// no validation rules for DownloadUrl
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoUrl != nil {
		// no validation rules for LogoUrl
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return OntologyCreationMultiError(errors)
	}

	return nil
}

func (m *OntologyCreation) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologyCreationMultiError is an error wrapping multiple validation errors
// returned by OntologyCreation.ValidateAll() if the designated constraints
// aren't met.
type OntologyCreationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyCreationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyCreationMultiError) AllErrors() []error { return m }

// OntologyCreationValidationError is the validation error returned by
// OntologyCreation.Validate if the designated constraints aren't met.
type OntologyCreationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyCreationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyCreationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyCreationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyCreationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyCreationValidationError) ErrorName() string { return "OntologyCreationValidationError" }

// Error satisfies the builtin error interface
func (e OntologyCreationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyCreation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyCreationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyCreationValidationError{}

// Validate checks the field values on OntologyUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OntologyUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OntologyUpdateMultiError,
// or nil if none found.
func (m *OntologyUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OntologyUpdateValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OntologyUpdateValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OntologyUpdateValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OntologyUpdateValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.WorkspaceId != nil {

		if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
			err = OntologyUpdateValidationError{
				field:  "WorkspaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.Source != nil {
		// no validation rules for Source
	}

	if m.DownloadUrl != nil {
		// no validation rules for DownloadUrl
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoUrl != nil {
		// no validation rules for LogoUrl
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return OntologyUpdateMultiError(errors)
	}

	return nil
}

func (m *OntologyUpdate) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologyUpdateMultiError is an error wrapping multiple validation errors
// returned by OntologyUpdate.ValidateAll() if the designated constraints
// aren't met.
type OntologyUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyUpdateMultiError) AllErrors() []error { return m }

// OntologyUpdateValidationError is the validation error returned by
// OntologyUpdate.Validate if the designated constraints aren't met.
type OntologyUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyUpdateValidationError) ErrorName() string { return "OntologyUpdateValidationError" }

// Error satisfies the builtin error interface
func (e OntologyUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyUpdateValidationError{}

// Validate checks the field values on OntologyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyListRequestMultiError, or nil if none found.
func (m *OntologyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
		err = OntologyListRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := OntologyListRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageNumber() < 0 {
		err := OntologyListRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OntologyListRequestMultiError(errors)
	}

	return nil
}

func (m *OntologyListRequest) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologyListRequestMultiError is an error wrapping multiple validation
// errors returned by OntologyListRequest.ValidateAll() if the designated
// constraints aren't met.
type OntologyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyListRequestMultiError) AllErrors() []error { return m }

// OntologyListRequestValidationError is the validation error returned by
// OntologyListRequest.Validate if the designated constraints aren't met.
type OntologyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyListRequestValidationError) ErrorName() string {
	return "OntologyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyListRequestValidationError{}

// Validate checks the field values on OntologyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyListResponseMultiError, or nil if none found.
func (m *OntologyListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOntologies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyListResponseValidationError{
						field:  fmt.Sprintf("Ontologies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyListResponseValidationError{
						field:  fmt.Sprintf("Ontologies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyListResponseValidationError{
					field:  fmt.Sprintf("Ontologies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyListResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OntologyListResponseMultiError(errors)
	}

	return nil
}

// OntologyListResponseMultiError is an error wrapping multiple validation
// errors returned by OntologyListResponse.ValidateAll() if the designated
// constraints aren't met.
type OntologyListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyListResponseMultiError) AllErrors() []error { return m }

// OntologyListResponseValidationError is the validation error returned by
// OntologyListResponse.Validate if the designated constraints aren't met.
type OntologyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyListResponseValidationError) ErrorName() string {
	return "OntologyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyListResponseValidationError{}

// Validate checks the field values on OntologyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyGetRequestMultiError, or nil if none found.
func (m *OntologyGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OntologyGetRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.WorkspaceId != nil {

		if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
			err = OntologyGetRequestValidationError{
				field:  "WorkspaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return OntologyGetRequestMultiError(errors)
	}

	return nil
}

func (m *OntologyGetRequest) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologyGetRequestMultiError is an error wrapping multiple validation errors
// returned by OntologyGetRequest.ValidateAll() if the designated constraints
// aren't met.
type OntologyGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyGetRequestMultiError) AllErrors() []error { return m }

// OntologyGetRequestValidationError is the validation error returned by
// OntologyGetRequest.Validate if the designated constraints aren't met.
type OntologyGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyGetRequestValidationError) ErrorName() string {
	return "OntologyGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyGetRequestValidationError{}

// Validate checks the field values on OntologyGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyGetResponseMultiError, or nil if none found.
func (m *OntologyGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyGetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Ontology != nil {

		if all {
			switch v := interface{}(m.GetOntology()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyGetResponseValidationError{
						field:  "Ontology",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyGetResponseValidationError{
						field:  "Ontology",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOntology()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyGetResponseValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OntologyGetResponseMultiError(errors)
	}

	return nil
}

// OntologyGetResponseMultiError is an error wrapping multiple validation
// errors returned by OntologyGetResponse.ValidateAll() if the designated
// constraints aren't met.
type OntologyGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyGetResponseMultiError) AllErrors() []error { return m }

// OntologyGetResponseValidationError is the validation error returned by
// OntologyGetResponse.Validate if the designated constraints aren't met.
type OntologyGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyGetResponseValidationError) ErrorName() string {
	return "OntologyGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyGetResponseValidationError{}

// Validate checks the field values on OntologyCreationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyCreationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyCreationRequestMultiError, or nil if none found.
func (m *OntologyCreationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyCreationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOntology()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OntologyCreationRequestValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OntologyCreationRequestValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOntology()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OntologyCreationRequestValidationError{
				field:  "Ontology",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OntologyCreationRequestMultiError(errors)
	}

	return nil
}

// OntologyCreationRequestMultiError is an error wrapping multiple validation
// errors returned by OntologyCreationRequest.ValidateAll() if the designated
// constraints aren't met.
type OntologyCreationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyCreationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyCreationRequestMultiError) AllErrors() []error { return m }

// OntologyCreationRequestValidationError is the validation error returned by
// OntologyCreationRequest.Validate if the designated constraints aren't met.
type OntologyCreationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyCreationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyCreationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyCreationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyCreationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyCreationRequestValidationError) ErrorName() string {
	return "OntologyCreationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyCreationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyCreationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyCreationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyCreationRequestValidationError{}

// Validate checks the field values on OntologyCreationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyCreationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyCreationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyCreationResponseMultiError, or nil if none found.
func (m *OntologyCreationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyCreationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyCreationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Ontology != nil {

		if all {
			switch v := interface{}(m.GetOntology()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyCreationResponseValidationError{
						field:  "Ontology",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyCreationResponseValidationError{
						field:  "Ontology",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOntology()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyCreationResponseValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OntologyCreationResponseMultiError(errors)
	}

	return nil
}

// OntologyCreationResponseMultiError is an error wrapping multiple validation
// errors returned by OntologyCreationResponse.ValidateAll() if the designated
// constraints aren't met.
type OntologyCreationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyCreationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyCreationResponseMultiError) AllErrors() []error { return m }

// OntologyCreationResponseValidationError is the validation error returned by
// OntologyCreationResponse.Validate if the designated constraints aren't met.
type OntologyCreationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyCreationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyCreationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyCreationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyCreationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyCreationResponseValidationError) ErrorName() string {
	return "OntologyCreationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyCreationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyCreationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyCreationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyCreationResponseValidationError{}

// Validate checks the field values on OntologyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyUpdateRequestMultiError, or nil if none found.
func (m *OntologyUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOntology()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OntologyUpdateRequestValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OntologyUpdateRequestValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOntology()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OntologyUpdateRequestValidationError{
				field:  "Ontology",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OntologyUpdateRequestMultiError(errors)
	}

	return nil
}

// OntologyUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by OntologyUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type OntologyUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyUpdateRequestMultiError) AllErrors() []error { return m }

// OntologyUpdateRequestValidationError is the validation error returned by
// OntologyUpdateRequest.Validate if the designated constraints aren't met.
type OntologyUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyUpdateRequestValidationError) ErrorName() string {
	return "OntologyUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyUpdateRequestValidationError{}

// Validate checks the field values on OntologyUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyUpdateResponseMultiError, or nil if none found.
func (m *OntologyUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyUpdateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyUpdateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyUpdateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Ontology != nil {

		if all {
			switch v := interface{}(m.GetOntology()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyUpdateResponseValidationError{
						field:  "Ontology",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyUpdateResponseValidationError{
						field:  "Ontology",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOntology()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyUpdateResponseValidationError{
					field:  "Ontology",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OntologyUpdateResponseMultiError(errors)
	}

	return nil
}

// OntologyUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by OntologyUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type OntologyUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyUpdateResponseMultiError) AllErrors() []error { return m }

// OntologyUpdateResponseValidationError is the validation error returned by
// OntologyUpdateResponse.Validate if the designated constraints aren't met.
type OntologyUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyUpdateResponseValidationError) ErrorName() string {
	return "OntologyUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyUpdateResponseValidationError{}

// Validate checks the field values on OntologyDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyDeletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyDeletionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyDeletionRequestMultiError, or nil if none found.
func (m *OntologyDeletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyDeletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OntologyDeletionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
		err = OntologyDeletionRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OntologyDeletionRequestMultiError(errors)
	}

	return nil
}

func (m *OntologyDeletionRequest) _validateUuid(uuid string) error {
	if matched := _ontology_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OntologyDeletionRequestMultiError is an error wrapping multiple validation
// errors returned by OntologyDeletionRequest.ValidateAll() if the designated
// constraints aren't met.
type OntologyDeletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyDeletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyDeletionRequestMultiError) AllErrors() []error { return m }

// OntologyDeletionRequestValidationError is the validation error returned by
// OntologyDeletionRequest.Validate if the designated constraints aren't met.
type OntologyDeletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyDeletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyDeletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyDeletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyDeletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyDeletionRequestValidationError) ErrorName() string {
	return "OntologyDeletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyDeletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyDeletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyDeletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyDeletionRequestValidationError{}

// Validate checks the field values on OntologyDeletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OntologyDeletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OntologyDeletionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OntologyDeletionResponseMultiError, or nil if none found.
func (m *OntologyDeletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OntologyDeletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OntologyDeletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OntologyDeletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OntologyDeletionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OntologyDeletionResponseMultiError(errors)
	}

	return nil
}

// OntologyDeletionResponseMultiError is an error wrapping multiple validation
// errors returned by OntologyDeletionResponse.ValidateAll() if the designated
// constraints aren't met.
type OntologyDeletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OntologyDeletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OntologyDeletionResponseMultiError) AllErrors() []error { return m }

// OntologyDeletionResponseValidationError is the validation error returned by
// OntologyDeletionResponse.Validate if the designated constraints aren't met.
type OntologyDeletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OntologyDeletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OntologyDeletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OntologyDeletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OntologyDeletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OntologyDeletionResponseValidationError) ErrorName() string {
	return "OntologyDeletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OntologyDeletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOntologyDeletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OntologyDeletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OntologyDeletionResponseValidationError{}
