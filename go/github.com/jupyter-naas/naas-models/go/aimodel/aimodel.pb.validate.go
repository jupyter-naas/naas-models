// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aimodel.proto

package aimodel

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _aimodel_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AIModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AIModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AIModelMultiError, or nil if none found.
func (m *AIModel) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = AIModelValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Provider != nil {
		// no validation rules for Provider
	}

	if m.Image != nil {
		// no validation rules for Image
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Restricted != nil {
		// no validation rules for Restricted
	}

	if m.NameAlias != nil {
		// no validation rules for NameAlias
	}

	if len(errors) > 0 {
		return AIModelMultiError(errors)
	}

	return nil
}

func (m *AIModel) _validateUuid(uuid string) error {
	if matched := _aimodel_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AIModelMultiError is an error wrapping multiple validation errors returned
// by AIModel.ValidateAll() if the designated constraints aren't met.
type AIModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelMultiError) AllErrors() []error { return m }

// AIModelValidationError is the validation error returned by AIModel.Validate
// if the designated constraints aren't met.
type AIModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelValidationError) ErrorName() string { return "AIModelValidationError" }

// Error satisfies the builtin error interface
func (e AIModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelValidationError{}

// Validate checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompletionResponseMultiError, or nil if none found.
func (m *CompletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ModelId != nil {

		if err := m._validateUuid(m.GetModelId()); err != nil {
			err = CompletionResponseValidationError{
				field:  "ModelId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.InputTokens != nil {
		// no validation rules for InputTokens
	}

	if m.OutputTokens != nil {
		// no validation rules for OutputTokens
	}

	if m.ImageResolution != nil {
		// no validation rules for ImageResolution
	}

	if m.ImageSteps != nil {
		// no validation rules for ImageSteps
	}

	if len(errors) > 0 {
		return CompletionResponseMultiError(errors)
	}

	return nil
}

func (m *CompletionResponse) _validateUuid(uuid string) error {
	if matched := _aimodel_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CompletionResponseMultiError is an error wrapping multiple validation errors
// returned by CompletionResponse.ValidateAll() if the designated constraints
// aren't met.
type CompletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompletionResponseMultiError) AllErrors() []error { return m }

// CompletionResponseValidationError is the validation error returned by
// CompletionResponse.Validate if the designated constraints aren't met.
type CompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionResponseValidationError) ErrorName() string {
	return "CompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionResponseValidationError{}

// Validate checks the field values on AIModelResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelResponseErrorMultiError, or nil if none found.
func (m *AIModelResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return AIModelResponseErrorMultiError(errors)
	}

	return nil
}

// AIModelResponseErrorMultiError is an error wrapping multiple validation
// errors returned by AIModelResponseError.ValidateAll() if the designated
// constraints aren't met.
type AIModelResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelResponseErrorMultiError) AllErrors() []error { return m }

// AIModelResponseErrorValidationError is the validation error returned by
// AIModelResponseError.Validate if the designated constraints aren't met.
type AIModelResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelResponseErrorValidationError) ErrorName() string {
	return "AIModelResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelResponseErrorValidationError{}

// Validate checks the field values on AIModelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelListRequestMultiError, or nil if none found.
func (m *AIModelListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageNumber != nil {
		// no validation rules for PageNumber
	}

	if len(errors) > 0 {
		return AIModelListRequestMultiError(errors)
	}

	return nil
}

// AIModelListRequestMultiError is an error wrapping multiple validation errors
// returned by AIModelListRequest.ValidateAll() if the designated constraints
// aren't met.
type AIModelListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelListRequestMultiError) AllErrors() []error { return m }

// AIModelListRequestValidationError is the validation error returned by
// AIModelListRequest.Validate if the designated constraints aren't met.
type AIModelListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelListRequestValidationError) ErrorName() string {
	return "AIModelListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelListRequestValidationError{}

// Validate checks the field values on AIModelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelListResponseMultiError, or nil if none found.
func (m *AIModelListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAimodels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelListResponseValidationError{
						field:  fmt.Sprintf("Aimodels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelListResponseValidationError{
						field:  fmt.Sprintf("Aimodels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelListResponseValidationError{
					field:  fmt.Sprintf("Aimodels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PageNumber != nil {
		// no validation rules for PageNumber
	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelListResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AIModelListResponseMultiError(errors)
	}

	return nil
}

// AIModelListResponseMultiError is an error wrapping multiple validation
// errors returned by AIModelListResponse.ValidateAll() if the designated
// constraints aren't met.
type AIModelListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelListResponseMultiError) AllErrors() []error { return m }

// AIModelListResponseValidationError is the validation error returned by
// AIModelListResponse.Validate if the designated constraints aren't met.
type AIModelListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelListResponseValidationError) ErrorName() string {
	return "AIModelListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelListResponseValidationError{}

// Validate checks the field values on AIModelGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AIModelGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelGetRequestMultiError, or nil if none found.
func (m *AIModelGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = AIModelGetRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AIModelGetRequestMultiError(errors)
	}

	return nil
}

func (m *AIModelGetRequest) _validateUuid(uuid string) error {
	if matched := _aimodel_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AIModelGetRequestMultiError is an error wrapping multiple validation errors
// returned by AIModelGetRequest.ValidateAll() if the designated constraints
// aren't met.
type AIModelGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelGetRequestMultiError) AllErrors() []error { return m }

// AIModelGetRequestValidationError is the validation error returned by
// AIModelGetRequest.Validate if the designated constraints aren't met.
type AIModelGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelGetRequestValidationError) ErrorName() string {
	return "AIModelGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelGetRequestValidationError{}

// Validate checks the field values on AIModelGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelGetResponseMultiError, or nil if none found.
func (m *AIModelGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Aimodel != nil {

		if all {
			switch v := interface{}(m.GetAimodel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelGetResponseValidationError{
						field:  "Aimodel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelGetResponseValidationError{
						field:  "Aimodel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAimodel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelGetResponseValidationError{
					field:  "Aimodel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelGetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AIModelGetResponseMultiError(errors)
	}

	return nil
}

// AIModelGetResponseMultiError is an error wrapping multiple validation errors
// returned by AIModelGetResponse.ValidateAll() if the designated constraints
// aren't met.
type AIModelGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelGetResponseMultiError) AllErrors() []error { return m }

// AIModelGetResponseValidationError is the validation error returned by
// AIModelGetResponse.Validate if the designated constraints aren't met.
type AIModelGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelGetResponseValidationError) ErrorName() string {
	return "AIModelGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelGetResponseValidationError{}

// Validate checks the field values on AIModelCompletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelCompletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelCompletionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelCompletionRequestMultiError, or nil if none found.
func (m *AIModelCompletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelCompletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = AIModelCompletionRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Payload != nil {
		// no validation rules for Payload
	}

	if len(errors) > 0 {
		return AIModelCompletionRequestMultiError(errors)
	}

	return nil
}

func (m *AIModelCompletionRequest) _validateUuid(uuid string) error {
	if matched := _aimodel_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AIModelCompletionRequestMultiError is an error wrapping multiple validation
// errors returned by AIModelCompletionRequest.ValidateAll() if the designated
// constraints aren't met.
type AIModelCompletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelCompletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelCompletionRequestMultiError) AllErrors() []error { return m }

// AIModelCompletionRequestValidationError is the validation error returned by
// AIModelCompletionRequest.Validate if the designated constraints aren't met.
type AIModelCompletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelCompletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelCompletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelCompletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelCompletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelCompletionRequestValidationError) ErrorName() string {
	return "AIModelCompletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelCompletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelCompletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelCompletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelCompletionRequestValidationError{}

// Validate checks the field values on AIModelCompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelCompletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelCompletionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelCompletionResponseMultiError, or nil if none found.
func (m *AIModelCompletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelCompletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Completion != nil {

		if all {
			switch v := interface{}(m.GetCompletion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelCompletionResponseValidationError{
						field:  "Completion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelCompletionResponseValidationError{
						field:  "Completion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompletion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelCompletionResponseValidationError{
					field:  "Completion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelCompletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelCompletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelCompletionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AIModelCompletionResponseMultiError(errors)
	}

	return nil
}

// AIModelCompletionResponseMultiError is an error wrapping multiple validation
// errors returned by AIModelCompletionResponse.ValidateAll() if the
// designated constraints aren't met.
type AIModelCompletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelCompletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelCompletionResponseMultiError) AllErrors() []error { return m }

// AIModelCompletionResponseValidationError is the validation error returned by
// AIModelCompletionResponse.Validate if the designated constraints aren't met.
type AIModelCompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelCompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelCompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelCompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelCompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelCompletionResponseValidationError) ErrorName() string {
	return "AIModelCompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelCompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelCompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelCompletionResponseValidationError{}

// Validate checks the field values on AIModelAdminCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelAdminCreationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelAdminCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelAdminCreationRequestMultiError, or nil if none found.
func (m *AIModelAdminCreationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelAdminCreationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Provider != nil {
		// no validation rules for Provider
	}

	if m.Image != nil {
		// no validation rules for Image
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Restricted != nil {
		// no validation rules for Restricted
	}

	if m.NameAlias != nil {
		// no validation rules for NameAlias
	}

	if len(errors) > 0 {
		return AIModelAdminCreationRequestMultiError(errors)
	}

	return nil
}

// AIModelAdminCreationRequestMultiError is an error wrapping multiple
// validation errors returned by AIModelAdminCreationRequest.ValidateAll() if
// the designated constraints aren't met.
type AIModelAdminCreationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelAdminCreationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelAdminCreationRequestMultiError) AllErrors() []error { return m }

// AIModelAdminCreationRequestValidationError is the validation error returned
// by AIModelAdminCreationRequest.Validate if the designated constraints
// aren't met.
type AIModelAdminCreationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelAdminCreationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelAdminCreationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelAdminCreationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelAdminCreationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelAdminCreationRequestValidationError) ErrorName() string {
	return "AIModelAdminCreationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelAdminCreationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelAdminCreationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelAdminCreationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelAdminCreationRequestValidationError{}

// Validate checks the field values on AIModelAdminCreationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelAdminCreationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelAdminCreationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelAdminCreationResponseMultiError, or nil if none found.
func (m *AIModelAdminCreationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelAdminCreationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Aimodel != nil {

		if all {
			switch v := interface{}(m.GetAimodel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelAdminCreationResponseValidationError{
						field:  "Aimodel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelAdminCreationResponseValidationError{
						field:  "Aimodel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAimodel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelAdminCreationResponseValidationError{
					field:  "Aimodel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelAdminCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelAdminCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelAdminCreationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AIModelAdminCreationResponseMultiError(errors)
	}

	return nil
}

// AIModelAdminCreationResponseMultiError is an error wrapping multiple
// validation errors returned by AIModelAdminCreationResponse.ValidateAll() if
// the designated constraints aren't met.
type AIModelAdminCreationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelAdminCreationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelAdminCreationResponseMultiError) AllErrors() []error { return m }

// AIModelAdminCreationResponseValidationError is the validation error returned
// by AIModelAdminCreationResponse.Validate if the designated constraints
// aren't met.
type AIModelAdminCreationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelAdminCreationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelAdminCreationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelAdminCreationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelAdminCreationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelAdminCreationResponseValidationError) ErrorName() string {
	return "AIModelAdminCreationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelAdminCreationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelAdminCreationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelAdminCreationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelAdminCreationResponseValidationError{}

// Validate checks the field values on AIModelAdminDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelAdminDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelAdminDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelAdminDeleteRequestMultiError, or nil if none found.
func (m *AIModelAdminDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelAdminDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = AIModelAdminDeleteRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AIModelAdminDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *AIModelAdminDeleteRequest) _validateUuid(uuid string) error {
	if matched := _aimodel_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AIModelAdminDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by AIModelAdminDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type AIModelAdminDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelAdminDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelAdminDeleteRequestMultiError) AllErrors() []error { return m }

// AIModelAdminDeleteRequestValidationError is the validation error returned by
// AIModelAdminDeleteRequest.Validate if the designated constraints aren't met.
type AIModelAdminDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelAdminDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelAdminDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelAdminDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelAdminDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelAdminDeleteRequestValidationError) ErrorName() string {
	return "AIModelAdminDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelAdminDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelAdminDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelAdminDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelAdminDeleteRequestValidationError{}

// Validate checks the field values on AIModelAdminDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIModelAdminDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIModelAdminDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIModelAdminDeleteResponseMultiError, or nil if none found.
func (m *AIModelAdminDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIModelAdminDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIModelAdminDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIModelAdminDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIModelAdminDeleteResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AIModelAdminDeleteResponseMultiError(errors)
	}

	return nil
}

// AIModelAdminDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by AIModelAdminDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type AIModelAdminDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIModelAdminDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIModelAdminDeleteResponseMultiError) AllErrors() []error { return m }

// AIModelAdminDeleteResponseValidationError is the validation error returned
// by AIModelAdminDeleteResponse.Validate if the designated constraints aren't met.
type AIModelAdminDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIModelAdminDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIModelAdminDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIModelAdminDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIModelAdminDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIModelAdminDeleteResponseValidationError) ErrorName() string {
	return "AIModelAdminDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIModelAdminDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIModelAdminDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIModelAdminDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIModelAdminDeleteResponseValidationError{}
