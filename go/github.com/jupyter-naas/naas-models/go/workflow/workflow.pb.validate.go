// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workflow.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _workflow_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Archive with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Archive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Archive with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ArchiveMultiError, or nil if none found.
func (m *Archive) ValidateAll() error {
	return m.validate(true)
}

func (m *Archive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for None

	if len(errors) > 0 {
		return ArchiveMultiError(errors)
	}

	return nil
}

// ArchiveMultiError is an error wrapping multiple validation errors returned
// by Archive.ValidateAll() if the designated constraints aren't met.
type ArchiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveMultiError) AllErrors() []error { return m }

// ArchiveValidationError is the validation error returned by Archive.Validate
// if the designated constraints aren't met.
type ArchiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveValidationError) ErrorName() string { return "ArchiveValidationError" }

// Error satisfies the builtin error interface
func (e ArchiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveValidationError{}

// Validate checks the field values on ArtifactS3 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactS3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactS3 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactS3MultiError, or
// nil if none found.
func (m *ArtifactS3) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactS3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Key != nil {
		// no validation rules for Key
	}

	if m.Bucket != nil {
		// no validation rules for Bucket
	}

	if len(errors) > 0 {
		return ArtifactS3MultiError(errors)
	}

	return nil
}

// ArtifactS3MultiError is an error wrapping multiple validation errors
// returned by ArtifactS3.ValidateAll() if the designated constraints aren't met.
type ArtifactS3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactS3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactS3MultiError) AllErrors() []error { return m }

// ArtifactS3ValidationError is the validation error returned by
// ArtifactS3.Validate if the designated constraints aren't met.
type ArtifactS3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactS3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactS3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactS3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactS3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactS3ValidationError) ErrorName() string { return "ArtifactS3ValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactS3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactS3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactS3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactS3ValidationError{}

// Validate checks the field values on Artifact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Artifact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Artifact with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactMultiError, or nil
// if none found.
func (m *Artifact) ValidateAll() error {
	return m.validate(true)
}

func (m *Artifact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Mode != nil {
		// no validation rules for Mode
	}

	if m.From != nil {
		// no validation rules for From
	}

	if m.Archive != nil {

		if all {
			switch v := interface{}(m.GetArchive()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactValidationError{
						field:  "Archive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactValidationError{
						field:  "Archive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArchive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactValidationError{
					field:  "Archive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.S3 != nil {

		if all {
			switch v := interface{}(m.GetS3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactValidationError{
						field:  "S3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactValidationError{
						field:  "S3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArtifactMultiError(errors)
	}

	return nil
}

// ArtifactMultiError is an error wrapping multiple validation errors returned
// by Artifact.ValidateAll() if the designated constraints aren't met.
type ArtifactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactMultiError) AllErrors() []error { return m }

// ArtifactValidationError is the validation error returned by
// Artifact.Validate if the designated constraints aren't met.
type ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactValidationError) ErrorName() string { return "ArtifactValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactValidationError{}

// Validate checks the field values on Inputs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Inputs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InputsMultiError, or nil if none found.
func (m *Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputsValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputsValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputsValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputsValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputsValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputsValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InputsMultiError(errors)
	}

	return nil
}

// InputsMultiError is an error wrapping multiple validation errors returned by
// Inputs.ValidateAll() if the designated constraints aren't met.
type InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputsMultiError) AllErrors() []error { return m }

// InputsValidationError is the validation error returned by Inputs.Validate if
// the designated constraints aren't met.
type InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputsValidationError) ErrorName() string { return "InputsValidationError" }

// Error satisfies the builtin error interface
func (e InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputsValidationError{}

// Validate checks the field values on Outputs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Outputs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutputsMultiError, or nil if none found.
func (m *Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OutputsValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OutputsValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OutputsValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OutputsValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OutputsValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OutputsValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OutputsMultiError(errors)
	}

	return nil
}

// OutputsMultiError is an error wrapping multiple validation errors returned
// by Outputs.ValidateAll() if the designated constraints aren't met.
type OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputsMultiError) AllErrors() []error { return m }

// OutputsValidationError is the validation error returned by Outputs.Validate
// if the designated constraints aren't met.
type OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputsValidationError) ErrorName() string { return "OutputsValidationError" }

// Error satisfies the builtin error interface
func (e OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputsValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parameter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParameterMultiError, or nil
// if none found.
func (m *Parameter) ValidateAll() error {
	return m.validate(true)
}

func (m *Parameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if m.Default != nil {
		// no validation rules for Default
	}

	if len(errors) > 0 {
		return ParameterMultiError(errors)
	}

	return nil
}

// ParameterMultiError is an error wrapping multiple validation errors returned
// by Parameter.ValidateAll() if the designated constraints aren't met.
type ParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterMultiError) AllErrors() []error { return m }

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}

// Validate checks the field values on Arguments with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Arguments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Arguments with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArgumentsMultiError, or nil
// if none found.
func (m *Arguments) ValidateAll() error {
	return m.validate(true)
}

func (m *Arguments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parameters

	// no validation rules for Artifacts

	if len(errors) > 0 {
		return ArgumentsMultiError(errors)
	}

	return nil
}

// ArgumentsMultiError is an error wrapping multiple validation errors returned
// by Arguments.ValidateAll() if the designated constraints aren't met.
type ArgumentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArgumentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArgumentsMultiError) AllErrors() []error { return m }

// ArgumentsValidationError is the validation error returned by
// Arguments.Validate if the designated constraints aren't met.
type ArgumentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArgumentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArgumentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArgumentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArgumentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArgumentsValidationError) ErrorName() string { return "ArgumentsValidationError" }

// Error satisfies the builtin error interface
func (e ArgumentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArguments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArgumentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArgumentsValidationError{}

// Validate checks the field values on DagTasks with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DagTasks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DagTasks with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DagTasksMultiError, or nil
// if none found.
func (m *DagTasks) ValidateAll() error {
	return m.validate(true)
}

func (m *DagTasks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Template

	if m.Depends != nil {
		// no validation rules for Depends
	}

	if m.Arguments != nil {

		if all {
			switch v := interface{}(m.GetArguments()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DagTasksValidationError{
						field:  "Arguments",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DagTasksValidationError{
						field:  "Arguments",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArguments()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DagTasksValidationError{
					field:  "Arguments",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DagTasksMultiError(errors)
	}

	return nil
}

// DagTasksMultiError is an error wrapping multiple validation errors returned
// by DagTasks.ValidateAll() if the designated constraints aren't met.
type DagTasksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DagTasksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DagTasksMultiError) AllErrors() []error { return m }

// DagTasksValidationError is the validation error returned by
// DagTasks.Validate if the designated constraints aren't met.
type DagTasksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DagTasksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DagTasksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DagTasksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DagTasksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DagTasksValidationError) ErrorName() string { return "DagTasksValidationError" }

// Error satisfies the builtin error interface
func (e DagTasksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDagTasks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DagTasksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DagTasksValidationError{}

// Validate checks the field values on DagTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DagTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DagTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DagTemplateMultiError, or
// nil if none found.
func (m *DagTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *DagTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DagTemplateValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DagTemplateValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DagTemplateValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Target != nil {
		// no validation rules for Target
	}

	if len(errors) > 0 {
		return DagTemplateMultiError(errors)
	}

	return nil
}

// DagTemplateMultiError is an error wrapping multiple validation errors
// returned by DagTemplate.ValidateAll() if the designated constraints aren't met.
type DagTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DagTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DagTemplateMultiError) AllErrors() []error { return m }

// DagTemplateValidationError is the validation error returned by
// DagTemplate.Validate if the designated constraints aren't met.
type DagTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DagTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DagTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DagTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DagTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DagTemplateValidationError) ErrorName() string { return "DagTemplateValidationError" }

// Error satisfies the builtin error interface
func (e DagTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDagTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DagTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DagTemplateValidationError{}

// Validate checks the field values on ScriptTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScriptTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScriptTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScriptTemplateMultiError,
// or nil if none found.
func (m *ScriptTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *ScriptTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resources

	if m.Image != nil {
		// no validation rules for Image
	}

	if m.Source != nil {
		// no validation rules for Source
	}

	if len(errors) > 0 {
		return ScriptTemplateMultiError(errors)
	}

	return nil
}

// ScriptTemplateMultiError is an error wrapping multiple validation errors
// returned by ScriptTemplate.ValidateAll() if the designated constraints
// aren't met.
type ScriptTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScriptTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScriptTemplateMultiError) AllErrors() []error { return m }

// ScriptTemplateValidationError is the validation error returned by
// ScriptTemplate.Validate if the designated constraints aren't met.
type ScriptTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptTemplateValidationError) ErrorName() string { return "ScriptTemplateValidationError" }

// Error satisfies the builtin error interface
func (e ScriptTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptTemplateValidationError{}

// Validate checks the field values on Template with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Template) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Template with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateMultiError, or nil
// if none found.
func (m *Template) ValidateAll() error {
	return m.validate(true)
}

func (m *Template) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metadata

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Container != nil {
		// no validation rules for Container
	}

	if m.Inputs != nil {

		if all {
			switch v := interface{}(m.GetInputs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Inputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Inputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Outputs != nil {

		if all {
			switch v := interface{}(m.GetOutputs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Dag != nil {

		if all {
			switch v := interface{}(m.GetDag()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Dag",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Dag",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDag()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  "Dag",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Script != nil {

		if all {
			switch v := interface{}(m.GetScript()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Script",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  "Script",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScript()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  "Script",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TemplateMultiError(errors)
	}

	return nil
}

// TemplateMultiError is an error wrapping multiple validation errors returned
// by Template.ValidateAll() if the designated constraints aren't met.
type TemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateMultiError) AllErrors() []error { return m }

// TemplateValidationError is the validation error returned by
// Template.Validate if the designated constraints aren't met.
type TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValidationError) ErrorName() string { return "TemplateValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValidationError{}

// Validate checks the field values on Spec with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Spec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Spec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpecMultiError, or nil if none found.
func (m *Spec) ValidateAll() error {
	return m.validate(true)
}

func (m *Spec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Entrypoint

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Arguments != nil {

		if all {
			switch v := interface{}(m.GetArguments()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  "Arguments",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  "Arguments",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArguments()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecValidationError{
					field:  "Arguments",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpecMultiError(errors)
	}

	return nil
}

// SpecMultiError is an error wrapping multiple validation errors returned by
// Spec.ValidateAll() if the designated constraints aren't met.
type SpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecMultiError) AllErrors() []error { return m }

// SpecValidationError is the validation error returned by Spec.Validate if the
// designated constraints aren't met.
type SpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecValidationError) ErrorName() string { return "SpecValidationError" }

// Error satisfies the builtin error interface
func (e SpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	if m.GenerateName != nil {
		// no validation rules for GenerateName
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Workflow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Workflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workflow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowMultiError, or nil
// if none found.
func (m *Workflow) ValidateAll() error {
	return m.validate(true)
}

func (m *Workflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowMultiError(errors)
	}

	return nil
}

// WorkflowMultiError is an error wrapping multiple validation errors returned
// by Workflow.ValidateAll() if the designated constraints aren't met.
type WorkflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowMultiError) AllErrors() []error { return m }

// WorkflowValidationError is the validation error returned by
// Workflow.Validate if the designated constraints aren't met.
type WorkflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowValidationError) ErrorName() string { return "WorkflowValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowValidationError{}

// Validate checks the field values on CronSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CronSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CronSpecMultiError, or nil
// if none found.
func (m *CronSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *CronSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schedule

	// no validation rules for Timezone

	if all {
		switch v := interface{}(m.GetWorkflowSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronSpecValidationError{
					field:  "WorkflowSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronSpecValidationError{
					field:  "WorkflowSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronSpecValidationError{
				field:  "WorkflowSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.StartingDeadlineSeconds != nil {
		// no validation rules for StartingDeadlineSeconds
	}

	if m.ConcurrencyPolicy != nil {
		// no validation rules for ConcurrencyPolicy
	}

	if m.SuccessfulJobsHistoryLimit != nil {
		// no validation rules for SuccessfulJobsHistoryLimit
	}

	if m.FailedJobsHistoryLimit != nil {
		// no validation rules for FailedJobsHistoryLimit
	}

	if m.Suspend != nil {
		// no validation rules for Suspend
	}

	if len(errors) > 0 {
		return CronSpecMultiError(errors)
	}

	return nil
}

// CronSpecMultiError is an error wrapping multiple validation errors returned
// by CronSpec.ValidateAll() if the designated constraints aren't met.
type CronSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronSpecMultiError) AllErrors() []error { return m }

// CronSpecValidationError is the validation error returned by
// CronSpec.Validate if the designated constraints aren't met.
type CronSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronSpecValidationError) ErrorName() string { return "CronSpecValidationError" }

// Error satisfies the builtin error interface
func (e CronSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronSpecValidationError{}

// Validate checks the field values on CronWorkflow with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CronWorkflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronWorkflow with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CronWorkflowMultiError, or
// nil if none found.
func (m *CronWorkflow) ValidateAll() error {
	return m.validate(true)
}

func (m *CronWorkflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronWorkflowValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronWorkflowValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronWorkflowValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronWorkflowValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronWorkflowValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronWorkflowValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronWorkflowMultiError(errors)
	}

	return nil
}

// CronWorkflowMultiError is an error wrapping multiple validation errors
// returned by CronWorkflow.ValidateAll() if the designated constraints aren't met.
type CronWorkflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronWorkflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronWorkflowMultiError) AllErrors() []error { return m }

// CronWorkflowValidationError is the validation error returned by
// CronWorkflow.Validate if the designated constraints aren't met.
type CronWorkflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronWorkflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronWorkflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronWorkflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronWorkflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronWorkflowValidationError) ErrorName() string { return "CronWorkflowValidationError" }

// Error satisfies the builtin error interface
func (e CronWorkflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronWorkflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronWorkflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronWorkflowValidationError{}

// Validate checks the field values on WorkflowCreation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowCreation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowCreation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowCreationMultiError, or nil if none found.
func (m *WorkflowCreation) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowCreation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.UserUid != nil {

		if err := m._validateUuid(m.GetUserUid()); err != nil {
			err = WorkflowCreationValidationError{
				field:  "UserUid",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if m.ServerDryRun != nil {
		// no validation rules for ServerDryRun
	}

	if m.Workflow != nil {

		if all {
			switch v := interface{}(m.GetWorkflow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowCreationValidationError{
						field:  "Workflow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowCreationValidationError{
						field:  "Workflow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowCreationValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowCreationMultiError(errors)
	}

	return nil
}

func (m *WorkflowCreation) _validateUuid(uuid string) error {
	if matched := _workflow_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowCreationMultiError is an error wrapping multiple validation errors
// returned by WorkflowCreation.ValidateAll() if the designated constraints
// aren't met.
type WorkflowCreationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowCreationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowCreationMultiError) AllErrors() []error { return m }

// WorkflowCreationValidationError is the validation error returned by
// WorkflowCreation.Validate if the designated constraints aren't met.
type WorkflowCreationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowCreationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowCreationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowCreationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowCreationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowCreationValidationError) ErrorName() string { return "WorkflowCreationValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowCreationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowCreation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowCreationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowCreationValidationError{}

// Validate checks the field values on WorkflowCreationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowCreationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowCreationRequestMultiError, or nil if none found.
func (m *WorkflowCreationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowCreationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.WorkspaceId != nil {

		if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
			err = WorkflowCreationRequestValidationError{
				field:  "WorkspaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.WorkflowCreationRequest != nil {

		if all {
			switch v := interface{}(m.GetWorkflowCreationRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowCreationRequestValidationError{
						field:  "WorkflowCreationRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowCreationRequestValidationError{
						field:  "WorkflowCreationRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowCreationRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowCreationRequestValidationError{
					field:  "WorkflowCreationRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowCreationRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowCreationRequest) _validateUuid(uuid string) error {
	if matched := _workflow_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowCreationRequestMultiError is an error wrapping multiple validation
// errors returned by WorkflowCreationRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowCreationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowCreationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowCreationRequestMultiError) AllErrors() []error { return m }

// WorkflowCreationRequestValidationError is the validation error returned by
// WorkflowCreationRequest.Validate if the designated constraints aren't met.
type WorkflowCreationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowCreationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowCreationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowCreationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowCreationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowCreationRequestValidationError) ErrorName() string {
	return "WorkflowCreationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowCreationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowCreationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowCreationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowCreationRequestValidationError{}

// Validate checks the field values on WorkflowCreationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowCreationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowCreationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowCreationResponseMultiError, or nil if none found.
func (m *WorkflowCreationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowCreationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowCreationResponseMultiError(errors)
	}

	return nil
}

// WorkflowCreationResponseMultiError is an error wrapping multiple validation
// errors returned by WorkflowCreationResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowCreationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowCreationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowCreationResponseMultiError) AllErrors() []error { return m }

// WorkflowCreationResponseValidationError is the validation error returned by
// WorkflowCreationResponse.Validate if the designated constraints aren't met.
type WorkflowCreationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowCreationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowCreationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowCreationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowCreationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowCreationResponseValidationError) ErrorName() string {
	return "WorkflowCreationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowCreationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowCreationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowCreationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowCreationResponseValidationError{}

// Validate checks the field values on WorkflowUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowUpdateRequestMultiError, or nil if none found.
func (m *WorkflowUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if m.Workflow != nil {

		if all {
			switch v := interface{}(m.GetWorkflow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowUpdateRequestValidationError{
						field:  "Workflow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowUpdateRequestValidationError{
						field:  "Workflow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowUpdateRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowUpdateRequestMultiError(errors)
	}

	return nil
}

// WorkflowUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by WorkflowUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowUpdateRequestMultiError) AllErrors() []error { return m }

// WorkflowUpdateRequestValidationError is the validation error returned by
// WorkflowUpdateRequest.Validate if the designated constraints aren't met.
type WorkflowUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowUpdateRequestValidationError) ErrorName() string {
	return "WorkflowUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowUpdateRequestValidationError{}

// Validate checks the field values on WorkflowUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowUpdateResponseMultiError, or nil if none found.
func (m *WorkflowUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowUpdateResponseMultiError(errors)
	}

	return nil
}

// WorkflowUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by WorkflowUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowUpdateResponseMultiError) AllErrors() []error { return m }

// WorkflowUpdateResponseValidationError is the validation error returned by
// WorkflowUpdateResponse.Validate if the designated constraints aren't met.
type WorkflowUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowUpdateResponseValidationError) ErrorName() string {
	return "WorkflowUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowUpdateResponseValidationError{}

// Validate checks the field values on WorkflowDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowDeleteRequestMultiError, or nil if none found.
func (m *WorkflowDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.WorkflowName != nil {
		// no validation rules for WorkflowName
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if len(errors) > 0 {
		return WorkflowDeleteRequestMultiError(errors)
	}

	return nil
}

// WorkflowDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by WorkflowDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowDeleteRequestMultiError) AllErrors() []error { return m }

// WorkflowDeleteRequestValidationError is the validation error returned by
// WorkflowDeleteRequest.Validate if the designated constraints aren't met.
type WorkflowDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowDeleteRequestValidationError) ErrorName() string {
	return "WorkflowDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowDeleteRequestValidationError{}

// Validate checks the field values on WorkflowDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowDeleteResponseMultiError, or nil if none found.
func (m *WorkflowDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowDeleteResponseMultiError(errors)
	}

	return nil
}

// WorkflowDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by WorkflowDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowDeleteResponseMultiError) AllErrors() []error { return m }

// WorkflowDeleteResponseValidationError is the validation error returned by
// WorkflowDeleteResponse.Validate if the designated constraints aren't met.
type WorkflowDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowDeleteResponseValidationError) ErrorName() string {
	return "WorkflowDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowDeleteResponseValidationError{}

// Validate checks the field values on WorkflowGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowGetRequestMultiError, or nil if none found.
func (m *WorkflowGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.WorkflowName != nil {
		// no validation rules for WorkflowName
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if len(errors) > 0 {
		return WorkflowGetRequestMultiError(errors)
	}

	return nil
}

// WorkflowGetRequestMultiError is an error wrapping multiple validation errors
// returned by WorkflowGetRequest.ValidateAll() if the designated constraints
// aren't met.
type WorkflowGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowGetRequestMultiError) AllErrors() []error { return m }

// WorkflowGetRequestValidationError is the validation error returned by
// WorkflowGetRequest.Validate if the designated constraints aren't met.
type WorkflowGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowGetRequestValidationError) ErrorName() string {
	return "WorkflowGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowGetRequestValidationError{}

// Validate checks the field values on WorkflowGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowGetResponseMultiError, or nil if none found.
func (m *WorkflowGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowGetResponseMultiError(errors)
	}

	return nil
}

// WorkflowGetResponseMultiError is an error wrapping multiple validation
// errors returned by WorkflowGetResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowGetResponseMultiError) AllErrors() []error { return m }

// WorkflowGetResponseValidationError is the validation error returned by
// WorkflowGetResponse.Validate if the designated constraints aren't met.
type WorkflowGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowGetResponseValidationError) ErrorName() string {
	return "WorkflowGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowGetResponseValidationError{}

// Validate checks the field values on WorkflowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowListRequestMultiError, or nil if none found.
func (m *WorkflowListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if len(errors) > 0 {
		return WorkflowListRequestMultiError(errors)
	}

	return nil
}

// WorkflowListRequestMultiError is an error wrapping multiple validation
// errors returned by WorkflowListRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowListRequestMultiError) AllErrors() []error { return m }

// WorkflowListRequestValidationError is the validation error returned by
// WorkflowListRequest.Validate if the designated constraints aren't met.
type WorkflowListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowListRequestValidationError) ErrorName() string {
	return "WorkflowListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowListRequestValidationError{}

// Validate checks the field values on WorkflowListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowListResponseMultiError, or nil if none found.
func (m *WorkflowListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkflows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowListResponseValidationError{
						field:  fmt.Sprintf("Workflows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowListResponseValidationError{
						field:  fmt.Sprintf("Workflows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowListResponseValidationError{
					field:  fmt.Sprintf("Workflows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowListResponseMultiError(errors)
	}

	return nil
}

// WorkflowListResponseMultiError is an error wrapping multiple validation
// errors returned by WorkflowListResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowListResponseMultiError) AllErrors() []error { return m }

// WorkflowListResponseValidationError is the validation error returned by
// WorkflowListResponse.Validate if the designated constraints aren't met.
type WorkflowListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowListResponseValidationError) ErrorName() string {
	return "WorkflowListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowListResponseValidationError{}

// Validate checks the field values on WorkflowCreationError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowCreationError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowCreationError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowCreationErrorMultiError, or nil if none found.
func (m *WorkflowCreationError) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowCreationError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowCreationErrorMultiError(errors)
	}

	return nil
}

// WorkflowCreationErrorMultiError is an error wrapping multiple validation
// errors returned by WorkflowCreationError.ValidateAll() if the designated
// constraints aren't met.
type WorkflowCreationErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowCreationErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowCreationErrorMultiError) AllErrors() []error { return m }

// WorkflowCreationErrorValidationError is the validation error returned by
// WorkflowCreationError.Validate if the designated constraints aren't met.
type WorkflowCreationErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowCreationErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowCreationErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowCreationErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowCreationErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowCreationErrorValidationError) ErrorName() string {
	return "WorkflowCreationErrorValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowCreationErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowCreationError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowCreationErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowCreationErrorValidationError{}

// Validate checks the field values on WorkflowUpdateError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowUpdateError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowUpdateError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowUpdateErrorMultiError, or nil if none found.
func (m *WorkflowUpdateError) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowUpdateError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowUpdateErrorMultiError(errors)
	}

	return nil
}

// WorkflowUpdateErrorMultiError is an error wrapping multiple validation
// errors returned by WorkflowUpdateError.ValidateAll() if the designated
// constraints aren't met.
type WorkflowUpdateErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowUpdateErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowUpdateErrorMultiError) AllErrors() []error { return m }

// WorkflowUpdateErrorValidationError is the validation error returned by
// WorkflowUpdateError.Validate if the designated constraints aren't met.
type WorkflowUpdateErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowUpdateErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowUpdateErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowUpdateErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowUpdateErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowUpdateErrorValidationError) ErrorName() string {
	return "WorkflowUpdateErrorValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowUpdateErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowUpdateError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowUpdateErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowUpdateErrorValidationError{}

// Validate checks the field values on WorkflowDeleteError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowDeleteError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowDeleteError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowDeleteErrorMultiError, or nil if none found.
func (m *WorkflowDeleteError) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowDeleteError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowDeleteErrorMultiError(errors)
	}

	return nil
}

// WorkflowDeleteErrorMultiError is an error wrapping multiple validation
// errors returned by WorkflowDeleteError.ValidateAll() if the designated
// constraints aren't met.
type WorkflowDeleteErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowDeleteErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowDeleteErrorMultiError) AllErrors() []error { return m }

// WorkflowDeleteErrorValidationError is the validation error returned by
// WorkflowDeleteError.Validate if the designated constraints aren't met.
type WorkflowDeleteErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowDeleteErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowDeleteErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowDeleteErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowDeleteErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowDeleteErrorValidationError) ErrorName() string {
	return "WorkflowDeleteErrorValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowDeleteErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowDeleteError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowDeleteErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowDeleteErrorValidationError{}

// Validate checks the field values on WorkflowGetError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowGetError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowGetError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowGetErrorMultiError, or nil if none found.
func (m *WorkflowGetError) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowGetError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowGetErrorMultiError(errors)
	}

	return nil
}

// WorkflowGetErrorMultiError is an error wrapping multiple validation errors
// returned by WorkflowGetError.ValidateAll() if the designated constraints
// aren't met.
type WorkflowGetErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowGetErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowGetErrorMultiError) AllErrors() []error { return m }

// WorkflowGetErrorValidationError is the validation error returned by
// WorkflowGetError.Validate if the designated constraints aren't met.
type WorkflowGetErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowGetErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowGetErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowGetErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowGetErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowGetErrorValidationError) ErrorName() string { return "WorkflowGetErrorValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowGetErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowGetError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowGetErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowGetErrorValidationError{}

// Validate checks the field values on WorkflowListError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowListError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowListError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowListErrorMultiError, or nil if none found.
func (m *WorkflowListError) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowListError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return WorkflowListErrorMultiError(errors)
	}

	return nil
}

// WorkflowListErrorMultiError is an error wrapping multiple validation errors
// returned by WorkflowListError.ValidateAll() if the designated constraints
// aren't met.
type WorkflowListErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowListErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowListErrorMultiError) AllErrors() []error { return m }

// WorkflowListErrorValidationError is the validation error returned by
// WorkflowListError.Validate if the designated constraints aren't met.
type WorkflowListErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowListErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowListErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowListErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowListErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowListErrorValidationError) ErrorName() string {
	return "WorkflowListErrorValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowListErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowListError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowListErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowListErrorValidationError{}
