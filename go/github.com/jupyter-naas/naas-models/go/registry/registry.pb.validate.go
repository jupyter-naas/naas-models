// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: registry.proto

package registry

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Registry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Registry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Registry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegistryMultiError, or nil
// if none found.
func (m *Registry) ValidateAll() error {
	return m.validate(true)
}

func (m *Registry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
			err := RegistryValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Registry_Name_Pattern.MatchString(m.GetName()) {
			err := RegistryValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Uri != nil {
		// no validation rules for Uri
	}

	if len(errors) > 0 {
		return RegistryMultiError(errors)
	}

	return nil
}

// RegistryMultiError is an error wrapping multiple validation errors returned
// by Registry.ValidateAll() if the designated constraints aren't met.
type RegistryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryMultiError) AllErrors() []error { return m }

// RegistryValidationError is the validation error returned by
// Registry.Validate if the designated constraints aren't met.
type RegistryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryValidationError) ErrorName() string { return "RegistryValidationError" }

// Error satisfies the builtin error interface
func (e RegistryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryValidationError{}

var _Registry_Name_Pattern = regexp.MustCompile("^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$")

// Validate checks the field values on RegistryCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryCredentialsMultiError, or nil if none found.
func (m *RegistryCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if len(errors) > 0 {
		return RegistryCredentialsMultiError(errors)
	}

	return nil
}

// RegistryCredentialsMultiError is an error wrapping multiple validation
// errors returned by RegistryCredentials.ValidateAll() if the designated
// constraints aren't met.
type RegistryCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCredentialsMultiError) AllErrors() []error { return m }

// RegistryCredentialsValidationError is the validation error returned by
// RegistryCredentials.Validate if the designated constraints aren't met.
type RegistryCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCredentialsValidationError) ErrorName() string {
	return "RegistryCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCredentialsValidationError{}

// Validate checks the field values on RegistryCreationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryCreationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryCreationRequestMultiError, or nil if none found.
func (m *RegistryCreationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCreationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
			err := RegistryCreationRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RegistryCreationRequest_Name_Pattern.MatchString(m.GetName()) {
			err := RegistryCreationRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegistryCreationRequestMultiError(errors)
	}

	return nil
}

// RegistryCreationRequestMultiError is an error wrapping multiple validation
// errors returned by RegistryCreationRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistryCreationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCreationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCreationRequestMultiError) AllErrors() []error { return m }

// RegistryCreationRequestValidationError is the validation error returned by
// RegistryCreationRequest.Validate if the designated constraints aren't met.
type RegistryCreationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCreationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCreationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCreationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCreationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCreationRequestValidationError) ErrorName() string {
	return "RegistryCreationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCreationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCreationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCreationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCreationRequestValidationError{}

var _RegistryCreationRequest_Name_Pattern = regexp.MustCompile("^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$")

// Validate checks the field values on RegistryCreationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryCreationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCreationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryCreationResponseMultiError, or nil if none found.
func (m *RegistryCreationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCreationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Registry != nil {

		if all {
			switch v := interface{}(m.GetRegistry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistryCreationResponseValidationError{
						field:  "Registry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistryCreationResponseValidationError{
						field:  "Registry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryCreationResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegistryCreationResponseMultiError(errors)
	}

	return nil
}

// RegistryCreationResponseMultiError is an error wrapping multiple validation
// errors returned by RegistryCreationResponse.ValidateAll() if the designated
// constraints aren't met.
type RegistryCreationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCreationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCreationResponseMultiError) AllErrors() []error { return m }

// RegistryCreationResponseValidationError is the validation error returned by
// RegistryCreationResponse.Validate if the designated constraints aren't met.
type RegistryCreationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCreationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCreationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCreationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCreationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCreationResponseValidationError) ErrorName() string {
	return "RegistryCreationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCreationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCreationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCreationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCreationResponseValidationError{}

// Validate checks the field values on RegistryCreationResponseError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryCreationResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCreationResponseError with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegistryCreationResponseErrorMultiError, or nil if none found.
func (m *RegistryCreationResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCreationResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if len(errors) > 0 {
		return RegistryCreationResponseErrorMultiError(errors)
	}

	return nil
}

// RegistryCreationResponseErrorMultiError is an error wrapping multiple
// validation errors returned by RegistryCreationResponseError.ValidateAll()
// if the designated constraints aren't met.
type RegistryCreationResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCreationResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCreationResponseErrorMultiError) AllErrors() []error { return m }

// RegistryCreationResponseErrorValidationError is the validation error
// returned by RegistryCreationResponseError.Validate if the designated
// constraints aren't met.
type RegistryCreationResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCreationResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCreationResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCreationResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCreationResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCreationResponseErrorValidationError) ErrorName() string {
	return "RegistryCreationResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCreationResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCreationResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCreationResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCreationResponseErrorValidationError{}

// Validate checks the field values on RegistryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryListRequestMultiError, or nil if none found.
func (m *RegistryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageNumber != nil {
		// no validation rules for PageNumber
	}

	if len(errors) > 0 {
		return RegistryListRequestMultiError(errors)
	}

	return nil
}

// RegistryListRequestMultiError is an error wrapping multiple validation
// errors returned by RegistryListRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryListRequestMultiError) AllErrors() []error { return m }

// RegistryListRequestValidationError is the validation error returned by
// RegistryListRequest.Validate if the designated constraints aren't met.
type RegistryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryListRequestValidationError) ErrorName() string {
	return "RegistryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryListRequestValidationError{}

// Validate checks the field values on RegistryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryListResponseMultiError, or nil if none found.
func (m *RegistryListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegistries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistryListResponseValidationError{
						field:  fmt.Sprintf("Registries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistryListResponseValidationError{
						field:  fmt.Sprintf("Registries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryListResponseValidationError{
					field:  fmt.Sprintf("Registries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegistryListResponseMultiError(errors)
	}

	return nil
}

// RegistryListResponseMultiError is an error wrapping multiple validation
// errors returned by RegistryListResponse.ValidateAll() if the designated
// constraints aren't met.
type RegistryListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryListResponseMultiError) AllErrors() []error { return m }

// RegistryListResponseValidationError is the validation error returned by
// RegistryListResponse.Validate if the designated constraints aren't met.
type RegistryListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryListResponseValidationError) ErrorName() string {
	return "RegistryListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryListResponseValidationError{}

// Validate checks the field values on RegistryGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryGetRequestMultiError, or nil if none found.
func (m *RegistryGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
			err := RegistryGetRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RegistryGetRequest_Name_Pattern.MatchString(m.GetName()) {
			err := RegistryGetRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegistryGetRequestMultiError(errors)
	}

	return nil
}

// RegistryGetRequestMultiError is an error wrapping multiple validation errors
// returned by RegistryGetRequest.ValidateAll() if the designated constraints
// aren't met.
type RegistryGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryGetRequestMultiError) AllErrors() []error { return m }

// RegistryGetRequestValidationError is the validation error returned by
// RegistryGetRequest.Validate if the designated constraints aren't met.
type RegistryGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryGetRequestValidationError) ErrorName() string {
	return "RegistryGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryGetRequestValidationError{}

var _RegistryGetRequest_Name_Pattern = regexp.MustCompile("^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$")

// Validate checks the field values on RegistryGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryGetResponseMultiError, or nil if none found.
func (m *RegistryGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Registry != nil {

		if all {
			switch v := interface{}(m.GetRegistry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistryGetResponseValidationError{
						field:  "Registry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistryGetResponseValidationError{
						field:  "Registry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryGetResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegistryGetResponseMultiError(errors)
	}

	return nil
}

// RegistryGetResponseMultiError is an error wrapping multiple validation
// errors returned by RegistryGetResponse.ValidateAll() if the designated
// constraints aren't met.
type RegistryGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryGetResponseMultiError) AllErrors() []error { return m }

// RegistryGetResponseValidationError is the validation error returned by
// RegistryGetResponse.Validate if the designated constraints aren't met.
type RegistryGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryGetResponseValidationError) ErrorName() string {
	return "RegistryGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryGetResponseValidationError{}

// Validate checks the field values on RegistryGetResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryGetResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryGetResponseError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryGetResponseErrorMultiError, or nil if none found.
func (m *RegistryGetResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryGetResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if len(errors) > 0 {
		return RegistryGetResponseErrorMultiError(errors)
	}

	return nil
}

// RegistryGetResponseErrorMultiError is an error wrapping multiple validation
// errors returned by RegistryGetResponseError.ValidateAll() if the designated
// constraints aren't met.
type RegistryGetResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryGetResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryGetResponseErrorMultiError) AllErrors() []error { return m }

// RegistryGetResponseErrorValidationError is the validation error returned by
// RegistryGetResponseError.Validate if the designated constraints aren't met.
type RegistryGetResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryGetResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryGetResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryGetResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryGetResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryGetResponseErrorValidationError) ErrorName() string {
	return "RegistryGetResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryGetResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryGetResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryGetResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryGetResponseErrorValidationError{}

// Validate checks the field values on RegistryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryDeleteRequestMultiError, or nil if none found.
func (m *RegistryDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return RegistryDeleteRequestMultiError(errors)
	}

	return nil
}

// RegistryDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by RegistryDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistryDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryDeleteRequestMultiError) AllErrors() []error { return m }

// RegistryDeleteRequestValidationError is the validation error returned by
// RegistryDeleteRequest.Validate if the designated constraints aren't met.
type RegistryDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryDeleteRequestValidationError) ErrorName() string {
	return "RegistryDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryDeleteRequestValidationError{}

// Validate checks the field values on RegistryDeleteResponseError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryDeleteResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryDeleteResponseError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryDeleteResponseErrorMultiError, or nil if none found.
func (m *RegistryDeleteResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryDeleteResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if len(errors) > 0 {
		return RegistryDeleteResponseErrorMultiError(errors)
	}

	return nil
}

// RegistryDeleteResponseErrorMultiError is an error wrapping multiple
// validation errors returned by RegistryDeleteResponseError.ValidateAll() if
// the designated constraints aren't met.
type RegistryDeleteResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryDeleteResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryDeleteResponseErrorMultiError) AllErrors() []error { return m }

// RegistryDeleteResponseErrorValidationError is the validation error returned
// by RegistryDeleteResponseError.Validate if the designated constraints
// aren't met.
type RegistryDeleteResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryDeleteResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryDeleteResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryDeleteResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryDeleteResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryDeleteResponseErrorValidationError) ErrorName() string {
	return "RegistryDeleteResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryDeleteResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryDeleteResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryDeleteResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryDeleteResponseErrorValidationError{}

// Validate checks the field values on RegistryCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryCredentialsRequestMultiError, or nil if none found.
func (m *RegistryCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
			err := RegistryCredentialsRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RegistryCredentialsRequest_Name_Pattern.MatchString(m.GetName()) {
			err := RegistryCredentialsRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegistryCredentialsRequestMultiError(errors)
	}

	return nil
}

// RegistryCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by RegistryCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type RegistryCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCredentialsRequestMultiError) AllErrors() []error { return m }

// RegistryCredentialsRequestValidationError is the validation error returned
// by RegistryCredentialsRequest.Validate if the designated constraints aren't met.
type RegistryCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCredentialsRequestValidationError) ErrorName() string {
	return "RegistryCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCredentialsRequestValidationError{}

var _RegistryCredentialsRequest_Name_Pattern = regexp.MustCompile("^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$")

// Validate checks the field values on RegistryCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryCredentialsResponseMultiError, or nil if none found.
func (m *RegistryCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
			err := RegistryCredentialsResponseValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RegistryCredentialsResponse_Name_Pattern.MatchString(m.GetName()) {
			err := RegistryCredentialsResponseValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Credentials != nil {

		if all {
			switch v := interface{}(m.GetCredentials()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistryCredentialsResponseValidationError{
						field:  "Credentials",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistryCredentialsResponseValidationError{
						field:  "Credentials",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryCredentialsResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegistryCredentialsResponseMultiError(errors)
	}

	return nil
}

// RegistryCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by RegistryCredentialsResponse.ValidateAll() if
// the designated constraints aren't met.
type RegistryCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCredentialsResponseMultiError) AllErrors() []error { return m }

// RegistryCredentialsResponseValidationError is the validation error returned
// by RegistryCredentialsResponse.Validate if the designated constraints
// aren't met.
type RegistryCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCredentialsResponseValidationError) ErrorName() string {
	return "RegistryCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCredentialsResponseValidationError{}

var _RegistryCredentialsResponse_Name_Pattern = regexp.MustCompile("^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$")

// Validate checks the field values on RegistryCredentialsResponseError with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegistryCredentialsResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryCredentialsResponseError with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegistryCredentialsResponseErrorMultiError, or nil if none found.
func (m *RegistryCredentialsResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryCredentialsResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if len(errors) > 0 {
		return RegistryCredentialsResponseErrorMultiError(errors)
	}

	return nil
}

// RegistryCredentialsResponseErrorMultiError is an error wrapping multiple
// validation errors returned by
// RegistryCredentialsResponseError.ValidateAll() if the designated
// constraints aren't met.
type RegistryCredentialsResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryCredentialsResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryCredentialsResponseErrorMultiError) AllErrors() []error { return m }

// RegistryCredentialsResponseErrorValidationError is the validation error
// returned by RegistryCredentialsResponseError.Validate if the designated
// constraints aren't met.
type RegistryCredentialsResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryCredentialsResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryCredentialsResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryCredentialsResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryCredentialsResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryCredentialsResponseErrorValidationError) ErrorName() string {
	return "RegistryCredentialsResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryCredentialsResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryCredentialsResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryCredentialsResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryCredentialsResponseErrorValidationError{}
