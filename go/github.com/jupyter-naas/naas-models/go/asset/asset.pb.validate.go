// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asset.proto

package asset

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _asset_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssetMultiError, or nil if none found.
func (m *Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.WorkspaceId != nil {
		// no validation rules for WorkspaceId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if m.VersionId != nil {
		// no validation rules for VersionId
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.ContentType != nil {
		// no validation rules for ContentType
	}

	if m.ContentDisposition != nil {
		// no validation rules for ContentDisposition
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return AssetMultiError(errors)
	}

	return nil
}

// AssetMultiError is an error wrapping multiple validation errors returned by
// Asset.ValidateAll() if the designated constraints aren't met.
type AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetMultiError) AllErrors() []error { return m }

// AssetValidationError is the validation error returned by Asset.Validate if
// the designated constraints aren't met.
type AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetValidationError) ErrorName() string { return "AssetValidationError" }

// Error satisfies the builtin error interface
func (e AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetValidationError{}

// Validate checks the field values on AssetCreation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetCreation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetCreation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetCreationMultiError, or
// nil if none found.
func (m *AssetCreation) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetCreation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.WorkspaceId != nil {

		if err := m._validateUuid(m.GetWorkspaceId()); err != nil {
			err = AssetCreationValidationError{
				field:  "WorkspaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.StorageName != nil {
		// no validation rules for StorageName
	}

	if m.Object != nil {
		// no validation rules for Object
	}

	if len(errors) > 0 {
		return AssetCreationMultiError(errors)
	}

	return nil
}

func (m *AssetCreation) _validateUuid(uuid string) error {
	if matched := _asset_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssetCreationMultiError is an error wrapping multiple validation errors
// returned by AssetCreation.ValidateAll() if the designated constraints
// aren't met.
type AssetCreationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetCreationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetCreationMultiError) AllErrors() []error { return m }

// AssetCreationValidationError is the validation error returned by
// AssetCreation.Validate if the designated constraints aren't met.
type AssetCreationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetCreationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetCreationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetCreationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetCreationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetCreationValidationError) ErrorName() string { return "AssetCreationValidationError" }

// Error satisfies the builtin error interface
func (e AssetCreationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetCreation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetCreationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetCreationValidationError{}

// Validate checks the field values on AssetResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetResponseErrorMultiError, or nil if none found.
func (m *AssetResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return AssetResponseErrorMultiError(errors)
	}

	return nil
}

// AssetResponseErrorMultiError is an error wrapping multiple validation errors
// returned by AssetResponseError.ValidateAll() if the designated constraints
// aren't met.
type AssetResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetResponseErrorMultiError) AllErrors() []error { return m }

// AssetResponseErrorValidationError is the validation error returned by
// AssetResponseError.Validate if the designated constraints aren't met.
type AssetResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetResponseErrorValidationError) ErrorName() string {
	return "AssetResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e AssetResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetResponseErrorValidationError{}

// Validate checks the field values on AssetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetCreateRequestMultiError, or nil if none found.
func (m *AssetCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Asset != nil {

		if all {
			switch v := interface{}(m.GetAsset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetCreateRequestValidationError{
						field:  "Asset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetCreateRequestValidationError{
						field:  "Asset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetCreateRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetCreateRequestMultiError(errors)
	}

	return nil
}

// AssetCreateRequestMultiError is an error wrapping multiple validation errors
// returned by AssetCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type AssetCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetCreateRequestMultiError) AllErrors() []error { return m }

// AssetCreateRequestValidationError is the validation error returned by
// AssetCreateRequest.Validate if the designated constraints aren't met.
type AssetCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetCreateRequestValidationError) ErrorName() string {
	return "AssetCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssetCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetCreateRequestValidationError{}

// Validate checks the field values on AssetCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetCreateResponseMultiError, or nil if none found.
func (m *AssetCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Asset != nil {

		if all {
			switch v := interface{}(m.GetAsset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetCreateResponseValidationError{
						field:  "Asset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetCreateResponseValidationError{
						field:  "Asset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetCreateResponseValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetCreateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetCreateResponseMultiError(errors)
	}

	return nil
}

// AssetCreateResponseMultiError is an error wrapping multiple validation
// errors returned by AssetCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type AssetCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetCreateResponseMultiError) AllErrors() []error { return m }

// AssetCreateResponseValidationError is the validation error returned by
// AssetCreateResponse.Validate if the designated constraints aren't met.
type AssetCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetCreateResponseValidationError) ErrorName() string {
	return "AssetCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssetCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetCreateResponseValidationError{}
