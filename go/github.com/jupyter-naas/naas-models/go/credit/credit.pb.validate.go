// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: credit.proto

package credit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreditTransaction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreditTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditTransactionMultiError, or nil if none found.
func (m *CreditTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Scenario != nil {
		// no validation rules for Scenario
	}

	if m.User != nil {
		// no validation rules for User
	}

	if m.Plan != nil {
		// no validation rules for Plan
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Meta_1Desc != nil {
		// no validation rules for Meta_1Desc
	}

	if m.Meta_1 != nil {
		// no validation rules for Meta_1
	}

	if m.Meta_2Desc != nil {
		// no validation rules for Meta_2Desc
	}

	if m.Meta_2 != nil {
		// no validation rules for Meta_2
	}

	if m.Meta_3Desc != nil {
		// no validation rules for Meta_3Desc
	}

	if m.Meta_3 != nil {
		// no validation rules for Meta_3
	}

	if m.Quantity != nil {
		// no validation rules for Quantity
	}

	if m.Unit != nil {
		// no validation rules for Unit
	}

	if m.UnitPrice != nil {
		// no validation rules for UnitPrice
	}

	if m.Credit != nil {
		// no validation rules for Credit
	}

	if m.CreditDollar != nil {
		// no validation rules for CreditDollar
	}

	if m.DateExtract != nil {
		// no validation rules for DateExtract
	}

	if len(errors) > 0 {
		return CreditTransactionMultiError(errors)
	}

	return nil
}

// CreditTransactionMultiError is an error wrapping multiple validation errors
// returned by CreditTransaction.ValidateAll() if the designated constraints
// aren't met.
type CreditTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditTransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditTransactionMultiError) AllErrors() []error { return m }

// CreditTransactionValidationError is the validation error returned by
// CreditTransaction.Validate if the designated constraints aren't met.
type CreditTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditTransactionValidationError) ErrorName() string {
	return "CreditTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e CreditTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditTransactionValidationError{}

// Validate checks the field values on Balance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Balance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Balance with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BalanceMultiError, or nil if none found.
func (m *Balance) ValidateAll() error {
	return m.validate(true)
}

func (m *Balance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Balance != nil {
		// no validation rules for Balance
	}

	if m.BalanceDollar != nil {
		// no validation rules for BalanceDollar
	}

	if len(errors) > 0 {
		return BalanceMultiError(errors)
	}

	return nil
}

// BalanceMultiError is an error wrapping multiple validation errors returned
// by Balance.ValidateAll() if the designated constraints aren't met.
type BalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceMultiError) AllErrors() []error { return m }

// BalanceValidationError is the validation error returned by Balance.Validate
// if the designated constraints aren't met.
type BalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceValidationError) ErrorName() string { return "BalanceValidationError" }

// Error satisfies the builtin error interface
func (e BalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceValidationError{}
