// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: secret.proto

package secrets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on SecretResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretResponseErrorMultiError, or nil if none found.
func (m *SecretResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return SecretResponseErrorMultiError(errors)
	}

	return nil
}

// SecretResponseErrorMultiError is an error wrapping multiple validation
// errors returned by SecretResponseError.ValidateAll() if the designated
// constraints aren't met.
type SecretResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretResponseErrorMultiError) AllErrors() []error { return m }

// SecretResponseErrorValidationError is the validation error returned by
// SecretResponseError.Validate if the designated constraints aren't met.
type SecretResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretResponseErrorValidationError) ErrorName() string {
	return "SecretResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e SecretResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretResponseErrorValidationError{}

// Validate checks the field values on SecretCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretCreateRequestMultiError, or nil if none found.
func (m *SecretCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Secret != nil {

		if all {
			switch v := interface{}(m.GetSecret()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretCreateRequestValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretCreateRequestValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretCreateRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretCreateRequestMultiError(errors)
	}

	return nil
}

// SecretCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SecretCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SecretCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretCreateRequestMultiError) AllErrors() []error { return m }

// SecretCreateRequestValidationError is the validation error returned by
// SecretCreateRequest.Validate if the designated constraints aren't met.
type SecretCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretCreateRequestValidationError) ErrorName() string {
	return "SecretCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretCreateRequestValidationError{}

// Validate checks the field values on SecretCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretCreateResponseMultiError, or nil if none found.
func (m *SecretCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretCreateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretCreateResponseMultiError(errors)
	}

	return nil
}

// SecretCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SecretCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SecretCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretCreateResponseMultiError) AllErrors() []error { return m }

// SecretCreateResponseValidationError is the validation error returned by
// SecretCreateResponse.Validate if the designated constraints aren't met.
type SecretCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretCreateResponseValidationError) ErrorName() string {
	return "SecretCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretCreateResponseValidationError{}

// Validate checks the field values on SecretGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretGetRequestMultiError, or nil if none found.
func (m *SecretGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return SecretGetRequestMultiError(errors)
	}

	return nil
}

// SecretGetRequestMultiError is an error wrapping multiple validation errors
// returned by SecretGetRequest.ValidateAll() if the designated constraints
// aren't met.
type SecretGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretGetRequestMultiError) AllErrors() []error { return m }

// SecretGetRequestValidationError is the validation error returned by
// SecretGetRequest.Validate if the designated constraints aren't met.
type SecretGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretGetRequestValidationError) ErrorName() string { return "SecretGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e SecretGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretGetRequestValidationError{}

// Validate checks the field values on SecretGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretGetResponseMultiError, or nil if none found.
func (m *SecretGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Secret != nil {

		if all {
			switch v := interface{}(m.GetSecret()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretGetResponseValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretGetResponseValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretGetResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretGetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretGetResponseMultiError(errors)
	}

	return nil
}

// SecretGetResponseMultiError is an error wrapping multiple validation errors
// returned by SecretGetResponse.ValidateAll() if the designated constraints
// aren't met.
type SecretGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretGetResponseMultiError) AllErrors() []error { return m }

// SecretGetResponseValidationError is the validation error returned by
// SecretGetResponse.Validate if the designated constraints aren't met.
type SecretGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretGetResponseValidationError) ErrorName() string {
	return "SecretGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretGetResponseValidationError{}

// Validate checks the field values on SecretDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretDeleteRequestMultiError, or nil if none found.
func (m *SecretDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return SecretDeleteRequestMultiError(errors)
	}

	return nil
}

// SecretDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SecretDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SecretDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretDeleteRequestMultiError) AllErrors() []error { return m }

// SecretDeleteRequestValidationError is the validation error returned by
// SecretDeleteRequest.Validate if the designated constraints aren't met.
type SecretDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretDeleteRequestValidationError) ErrorName() string {
	return "SecretDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretDeleteRequestValidationError{}

// Validate checks the field values on SecretDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretDeleteResponseMultiError, or nil if none found.
func (m *SecretDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretDeleteResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretDeleteResponseMultiError(errors)
	}

	return nil
}

// SecretDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by SecretDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SecretDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretDeleteResponseMultiError) AllErrors() []error { return m }

// SecretDeleteResponseValidationError is the validation error returned by
// SecretDeleteResponse.Validate if the designated constraints aren't met.
type SecretDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretDeleteResponseValidationError) ErrorName() string {
	return "SecretDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretDeleteResponseValidationError{}

// Validate checks the field values on SecretListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretListRequestMultiError, or nil if none found.
func (m *SecretListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageNumber != nil {
		// no validation rules for PageNumber
	}

	if len(errors) > 0 {
		return SecretListRequestMultiError(errors)
	}

	return nil
}

// SecretListRequestMultiError is an error wrapping multiple validation errors
// returned by SecretListRequest.ValidateAll() if the designated constraints
// aren't met.
type SecretListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretListRequestMultiError) AllErrors() []error { return m }

// SecretListRequestValidationError is the validation error returned by
// SecretListRequest.Validate if the designated constraints aren't met.
type SecretListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretListRequestValidationError) ErrorName() string {
	return "SecretListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretListRequestValidationError{}

// Validate checks the field values on SecretListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretListResponseMultiError, or nil if none found.
func (m *SecretListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretListResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretListResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretListResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretListResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretListResponseMultiError(errors)
	}

	return nil
}

// SecretListResponseMultiError is an error wrapping multiple validation errors
// returned by SecretListResponse.ValidateAll() if the designated constraints
// aren't met.
type SecretListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretListResponseMultiError) AllErrors() []error { return m }

// SecretListResponseValidationError is the validation error returned by
// SecretListResponse.Validate if the designated constraints aren't met.
type SecretListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretListResponseValidationError) ErrorName() string {
	return "SecretListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretListResponseValidationError{}

// Validate checks the field values on SecretBulkCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretBulkCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretBulkCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretBulkCreateRequestMultiError, or nil if none found.
func (m *SecretBulkCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretBulkCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretBulkCreateRequestValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretBulkCreateRequestValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretBulkCreateRequestValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretBulkCreateRequestMultiError(errors)
	}

	return nil
}

// SecretBulkCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SecretBulkCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SecretBulkCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretBulkCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretBulkCreateRequestMultiError) AllErrors() []error { return m }

// SecretBulkCreateRequestValidationError is the validation error returned by
// SecretBulkCreateRequest.Validate if the designated constraints aren't met.
type SecretBulkCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretBulkCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretBulkCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretBulkCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretBulkCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretBulkCreateRequestValidationError) ErrorName() string {
	return "SecretBulkCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretBulkCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretBulkCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretBulkCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretBulkCreateRequestValidationError{}

// Validate checks the field values on SecretBulkCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretBulkCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretBulkCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretBulkCreateResponseMultiError, or nil if none found.
func (m *SecretBulkCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretBulkCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetError() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretBulkCreateResponseValidationError{
						field:  fmt.Sprintf("Error[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretBulkCreateResponseValidationError{
						field:  fmt.Sprintf("Error[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretBulkCreateResponseValidationError{
					field:  fmt.Sprintf("Error[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretBulkCreateResponseMultiError(errors)
	}

	return nil
}

// SecretBulkCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SecretBulkCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SecretBulkCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretBulkCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretBulkCreateResponseMultiError) AllErrors() []error { return m }

// SecretBulkCreateResponseValidationError is the validation error returned by
// SecretBulkCreateResponse.Validate if the designated constraints aren't met.
type SecretBulkCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretBulkCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretBulkCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretBulkCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretBulkCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretBulkCreateResponseValidationError) ErrorName() string {
	return "SecretBulkCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretBulkCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretBulkCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretBulkCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretBulkCreateResponseValidationError{}
