// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MessageResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageResponseErrorMultiError, or nil if none found.
func (m *MessageResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return MessageResponseErrorMultiError(errors)
	}

	return nil
}

// MessageResponseErrorMultiError is an error wrapping multiple validation
// errors returned by MessageResponseError.ValidateAll() if the designated
// constraints aren't met.
type MessageResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageResponseErrorMultiError) AllErrors() []error { return m }

// MessageResponseErrorValidationError is the validation error returned by
// MessageResponseError.Validate if the designated constraints aren't met.
type MessageResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageResponseErrorValidationError) ErrorName() string {
	return "MessageResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e MessageResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageResponseErrorValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.CreatedAt != nil {

		if m.GetCreatedAt() != "" {

		}

	}

	if m.ChatId != nil {
		// no validation rules for ChatId
	}

	if m.FromUser != nil {
		// no validation rules for FromUser
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.MessageType != nil {

		if m.GetMessageType() != "" {

		}

	}

	if m.MessageLanguage != nil {

		if m.GetMessageLanguage() != "" {

		}

	}

	if m.ModelId != nil {
		// no validation rules for ModelId
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Metadata != nil {
		// no validation rules for Metadata
	}

	if m.DeletedAt != nil {

		if m.GetDeletedAt() != "" {

		}

	}

	if m.Selected != nil {
		// no validation rules for Selected
	}

	if m.ArchivedAt != nil {

		if m.GetArchivedAt() != "" {

		}

	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Messages with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Messages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Messages with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessagesMultiError, or nil
// if none found.
func (m *Messages) ValidateAll() error {
	return m.validate(true)
}

func (m *Messages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessagesValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessagesMultiError(errors)
	}

	return nil
}

// MessagesMultiError is an error wrapping multiple validation errors returned
// by Messages.ValidateAll() if the designated constraints aren't met.
type MessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessagesMultiError) AllErrors() []error { return m }

// MessagesValidationError is the validation error returned by
// Messages.Validate if the designated constraints aren't met.
type MessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessagesValidationError) ErrorName() string { return "MessagesValidationError" }

// Error satisfies the builtin error interface
func (e MessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessagesValidationError{}

// Validate checks the field values on MessageDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageDeletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageDeletionRequestMultiError, or nil if none found.
func (m *MessageDeletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDeletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if len(errors) > 0 {
		return MessageDeletionRequestMultiError(errors)
	}

	return nil
}

// MessageDeletionRequestMultiError is an error wrapping multiple validation
// errors returned by MessageDeletionRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageDeletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageDeletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageDeletionRequestMultiError) AllErrors() []error { return m }

// MessageDeletionRequestValidationError is the validation error returned by
// MessageDeletionRequest.Validate if the designated constraints aren't met.
type MessageDeletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDeletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDeletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDeletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDeletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDeletionRequestValidationError) ErrorName() string {
	return "MessageDeletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageDeletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDeletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDeletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDeletionRequestValidationError{}

// Validate checks the field values on MessageDeletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageDeletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageDeletionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageDeletionResponseMultiError, or nil if none found.
func (m *MessageDeletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDeletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if len(errors) > 0 {
		return MessageDeletionResponseMultiError(errors)
	}

	return nil
}

// MessageDeletionResponseMultiError is an error wrapping multiple validation
// errors returned by MessageDeletionResponse.ValidateAll() if the designated
// constraints aren't met.
type MessageDeletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageDeletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageDeletionResponseMultiError) AllErrors() []error { return m }

// MessageDeletionResponseValidationError is the validation error returned by
// MessageDeletionResponse.Validate if the designated constraints aren't met.
type MessageDeletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDeletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDeletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDeletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDeletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDeletionResponseValidationError) ErrorName() string {
	return "MessageDeletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageDeletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDeletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDeletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDeletionResponseValidationError{}

// Validate checks the field values on MessageRatinResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRatinResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRatinResponseError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRatinResponseErrorMultiError, or nil if none found.
func (m *MessageRatinResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRatinResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return MessageRatinResponseErrorMultiError(errors)
	}

	return nil
}

// MessageRatinResponseErrorMultiError is an error wrapping multiple validation
// errors returned by MessageRatinResponseError.ValidateAll() if the
// designated constraints aren't met.
type MessageRatinResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRatinResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRatinResponseErrorMultiError) AllErrors() []error { return m }

// MessageRatinResponseErrorValidationError is the validation error returned by
// MessageRatinResponseError.Validate if the designated constraints aren't met.
type MessageRatinResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRatinResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRatinResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRatinResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRatinResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRatinResponseErrorValidationError) ErrorName() string {
	return "MessageRatinResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRatinResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRatinResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRatinResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRatinResponseErrorValidationError{}

// Validate checks the field values on MessageRating with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageRating) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRating with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageRatingMultiError, or
// nil if none found.
func (m *MessageRating) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRating) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.MessageId != nil {
		// no validation rules for MessageId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.MessageVersion != nil {
		// no validation rules for MessageVersion
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.Rating != nil {

		if !_MessageRating_Rating_Pattern.MatchString(m.GetRating()) {
			err := MessageRatingValidationError{
				field:  "Rating",
				reason: "value does not match regex pattern \"^(LIKE|DISLIKE)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MessageRatingMultiError(errors)
	}

	return nil
}

// MessageRatingMultiError is an error wrapping multiple validation errors
// returned by MessageRating.ValidateAll() if the designated constraints
// aren't met.
type MessageRatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRatingMultiError) AllErrors() []error { return m }

// MessageRatingValidationError is the validation error returned by
// MessageRating.Validate if the designated constraints aren't met.
type MessageRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRatingValidationError) ErrorName() string { return "MessageRatingValidationError" }

// Error satisfies the builtin error interface
func (e MessageRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRatingValidationError{}

var _MessageRating_Rating_Pattern = regexp.MustCompile("^(LIKE|DISLIKE)$")

// Validate checks the field values on MessageRatingCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRatingCreationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRatingCreationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRatingCreationRequestMultiError, or nil if none found.
func (m *MessageRatingCreationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRatingCreationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.MessageId != nil {
		// no validation rules for MessageId
	}

	if m.MessageVersion != nil {
		// no validation rules for MessageVersion
	}

	if m.Rating != nil {

		if !_MessageRatingCreationRequest_Rating_Pattern.MatchString(m.GetRating()) {
			err := MessageRatingCreationRequestValidationError{
				field:  "Rating",
				reason: "value does not match regex pattern \"^(LIKE|DISLIKE)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MessageRatingCreationRequestMultiError(errors)
	}

	return nil
}

// MessageRatingCreationRequestMultiError is an error wrapping multiple
// validation errors returned by MessageRatingCreationRequest.ValidateAll() if
// the designated constraints aren't met.
type MessageRatingCreationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRatingCreationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRatingCreationRequestMultiError) AllErrors() []error { return m }

// MessageRatingCreationRequestValidationError is the validation error returned
// by MessageRatingCreationRequest.Validate if the designated constraints
// aren't met.
type MessageRatingCreationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRatingCreationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRatingCreationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRatingCreationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRatingCreationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRatingCreationRequestValidationError) ErrorName() string {
	return "MessageRatingCreationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRatingCreationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRatingCreationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRatingCreationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRatingCreationRequestValidationError{}

var _MessageRatingCreationRequest_Rating_Pattern = regexp.MustCompile("^(LIKE|DISLIKE)$")

// Validate checks the field values on MessageRatingCreationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRatingCreationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRatingCreationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MessageRatingCreationResponseMultiError, or nil if none found.
func (m *MessageRatingCreationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRatingCreationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageRatingCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageRatingCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageRatingCreationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MessageRating != nil {

		if all {
			switch v := interface{}(m.GetMessageRating()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageRatingCreationResponseValidationError{
						field:  "MessageRating",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageRatingCreationResponseValidationError{
						field:  "MessageRating",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessageRating()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageRatingCreationResponseValidationError{
					field:  "MessageRating",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageRatingCreationResponseMultiError(errors)
	}

	return nil
}

// MessageRatingCreationResponseMultiError is an error wrapping multiple
// validation errors returned by MessageRatingCreationResponse.ValidateAll()
// if the designated constraints aren't met.
type MessageRatingCreationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRatingCreationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRatingCreationResponseMultiError) AllErrors() []error { return m }

// MessageRatingCreationResponseValidationError is the validation error
// returned by MessageRatingCreationResponse.Validate if the designated
// constraints aren't met.
type MessageRatingCreationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRatingCreationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRatingCreationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRatingCreationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRatingCreationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRatingCreationResponseValidationError) ErrorName() string {
	return "MessageRatingCreationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageRatingCreationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRatingCreationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRatingCreationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRatingCreationResponseValidationError{}

// Validate checks the field values on Chat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Chat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChatMultiError, or nil if none found.
func (m *Chat) ValidateAll() error {
	return m.validate(true)
}

func (m *Chat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DeletedAt != nil {
		// no validation rules for DeletedAt
	}

	if m.IsGroup != nil {
		// no validation rules for IsGroup
	}

	if m.IsPersonnalAssistant != nil {
		// no validation rules for IsPersonnalAssistant
	}

	if m.StarredAt != nil {
		// no validation rules for StarredAt
	}

	if len(errors) > 0 {
		return ChatMultiError(errors)
	}

	return nil
}

// ChatMultiError is an error wrapping multiple validation errors returned by
// Chat.ValidateAll() if the designated constraints aren't met.
type ChatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMultiError) AllErrors() []error { return m }

// ChatValidationError is the validation error returned by Chat.Validate if the
// designated constraints aren't met.
type ChatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatValidationError) ErrorName() string { return "ChatValidationError" }

// Error satisfies the builtin error interface
func (e ChatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatValidationError{}

// Validate checks the field values on ChatMessages with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessagesMultiError, or
// nil if none found.
func (m *ChatMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int32, len(m.GetMessages()))
		i := 0
		for key := range m.GetMessages() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMessages()[key]
			_ = val

			// no validation rules for Messages[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ChatMessagesValidationError{
							field:  fmt.Sprintf("Messages[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ChatMessagesValidationError{
							field:  fmt.Sprintf("Messages[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ChatMessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ChatMessagesMultiError(errors)
	}

	return nil
}

// ChatMessagesMultiError is an error wrapping multiple validation errors
// returned by ChatMessages.ValidateAll() if the designated constraints aren't met.
type ChatMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessagesMultiError) AllErrors() []error { return m }

// ChatMessagesValidationError is the validation error returned by
// ChatMessages.Validate if the designated constraints aren't met.
type ChatMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessagesValidationError) ErrorName() string { return "ChatMessagesValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessagesValidationError{}

// Validate checks the field values on ChatResponseError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatResponseErrorMultiError, or nil if none found.
func (m *ChatResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return ChatResponseErrorMultiError(errors)
	}

	return nil
}

// ChatResponseErrorMultiError is an error wrapping multiple validation errors
// returned by ChatResponseError.ValidateAll() if the designated constraints
// aren't met.
type ChatResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatResponseErrorMultiError) AllErrors() []error { return m }

// ChatResponseErrorValidationError is the validation error returned by
// ChatResponseError.Validate if the designated constraints aren't met.
type ChatResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatResponseErrorValidationError) ErrorName() string {
	return "ChatResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e ChatResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatResponseErrorValidationError{}

// Validate checks the field values on ChatCreationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCreationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCreationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCreationRequestMultiError, or nil if none found.
func (m *ChatCreationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCreationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.IsPersonnalAssistant != nil {
		// no validation rules for IsPersonnalAssistant
	}

	if len(errors) > 0 {
		return ChatCreationRequestMultiError(errors)
	}

	return nil
}

// ChatCreationRequestMultiError is an error wrapping multiple validation
// errors returned by ChatCreationRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatCreationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCreationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCreationRequestMultiError) AllErrors() []error { return m }

// ChatCreationRequestValidationError is the validation error returned by
// ChatCreationRequest.Validate if the designated constraints aren't met.
type ChatCreationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCreationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCreationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCreationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCreationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCreationRequestValidationError) ErrorName() string {
	return "ChatCreationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCreationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCreationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCreationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCreationRequestValidationError{}

// Validate checks the field values on ChatCreationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCreationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCreationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCreationResponseMultiError, or nil if none found.
func (m *ChatCreationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCreationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Chat != nil {

		if all {
			switch v := interface{}(m.GetChat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCreationResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCreationResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCreationResponseValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCreationResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCreationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatCreationResponseMultiError(errors)
	}

	return nil
}

// ChatCreationResponseMultiError is an error wrapping multiple validation
// errors returned by ChatCreationResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatCreationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCreationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCreationResponseMultiError) AllErrors() []error { return m }

// ChatCreationResponseValidationError is the validation error returned by
// ChatCreationResponse.Validate if the designated constraints aren't met.
type ChatCreationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCreationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCreationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCreationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCreationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCreationResponseValidationError) ErrorName() string {
	return "ChatCreationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCreationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCreationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCreationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCreationResponseValidationError{}

// Validate checks the field values on ChatGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatGetRequestMultiError,
// or nil if none found.
func (m *ChatGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return ChatGetRequestMultiError(errors)
	}

	return nil
}

// ChatGetRequestMultiError is an error wrapping multiple validation errors
// returned by ChatGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ChatGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatGetRequestMultiError) AllErrors() []error { return m }

// ChatGetRequestValidationError is the validation error returned by
// ChatGetRequest.Validate if the designated constraints aren't met.
type ChatGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatGetRequestValidationError) ErrorName() string { return "ChatGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChatGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatGetRequestValidationError{}

// Validate checks the field values on ChatGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatGetResponseMultiError, or nil if none found.
func (m *ChatGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Chat != nil {

		if all {
			switch v := interface{}(m.GetChat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatGetResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatGetResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatGetResponseValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatGetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatGetResponseMultiError(errors)
	}

	return nil
}

// ChatGetResponseMultiError is an error wrapping multiple validation errors
// returned by ChatGetResponse.ValidateAll() if the designated constraints
// aren't met.
type ChatGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatGetResponseMultiError) AllErrors() []error { return m }

// ChatGetResponseValidationError is the validation error returned by
// ChatGetResponse.Validate if the designated constraints aren't met.
type ChatGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatGetResponseValidationError) ErrorName() string { return "ChatGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatGetResponseValidationError{}

// Validate checks the field values on ChatMessageGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatMessageGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessageGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatMessageGetRequestMultiError, or nil if none found.
func (m *ChatMessageGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessageGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return ChatMessageGetRequestMultiError(errors)
	}

	return nil
}

// ChatMessageGetRequestMultiError is an error wrapping multiple validation
// errors returned by ChatMessageGetRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatMessageGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageGetRequestMultiError) AllErrors() []error { return m }

// ChatMessageGetRequestValidationError is the validation error returned by
// ChatMessageGetRequest.Validate if the designated constraints aren't met.
type ChatMessageGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageGetRequestValidationError) ErrorName() string {
	return "ChatMessageGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatMessageGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessageGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageGetRequestValidationError{}

// Validate checks the field values on ChatMessageGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatMessageGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessageGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatMessageGetResponseMultiError, or nil if none found.
func (m *ChatMessageGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessageGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatMessageGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatMessageGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatMessageGetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Messages != nil {

		if all {
			switch v := interface{}(m.GetMessages()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatMessageGetResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatMessageGetResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatMessageGetResponseValidationError{
					field:  "Messages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatMessageGetResponseMultiError(errors)
	}

	return nil
}

// ChatMessageGetResponseMultiError is an error wrapping multiple validation
// errors returned by ChatMessageGetResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatMessageGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageGetResponseMultiError) AllErrors() []error { return m }

// ChatMessageGetResponseValidationError is the validation error returned by
// ChatMessageGetResponse.Validate if the designated constraints aren't met.
type ChatMessageGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageGetResponseValidationError) ErrorName() string {
	return "ChatMessageGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatMessageGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessageGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageGetResponseValidationError{}

// Validate checks the field values on ChatDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatDeletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatDeletionRequestMultiError, or nil if none found.
func (m *ChatDeletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatDeletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return ChatDeletionRequestMultiError(errors)
	}

	return nil
}

// ChatDeletionRequestMultiError is an error wrapping multiple validation
// errors returned by ChatDeletionRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatDeletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatDeletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatDeletionRequestMultiError) AllErrors() []error { return m }

// ChatDeletionRequestValidationError is the validation error returned by
// ChatDeletionRequest.Validate if the designated constraints aren't met.
type ChatDeletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatDeletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatDeletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatDeletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatDeletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatDeletionRequestValidationError) ErrorName() string {
	return "ChatDeletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatDeletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatDeletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatDeletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatDeletionRequestValidationError{}

// Validate checks the field values on ChatDeletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatDeletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatDeletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatDeletionResponseMultiError, or nil if none found.
func (m *ChatDeletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatDeletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatDeletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatDeletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatDeletionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatDeletionResponseMultiError(errors)
	}

	return nil
}

// ChatDeletionResponseMultiError is an error wrapping multiple validation
// errors returned by ChatDeletionResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatDeletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatDeletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatDeletionResponseMultiError) AllErrors() []error { return m }

// ChatDeletionResponseValidationError is the validation error returned by
// ChatDeletionResponse.Validate if the designated constraints aren't met.
type ChatDeletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatDeletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatDeletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatDeletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatDeletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatDeletionResponseValidationError) ErrorName() string {
	return "ChatDeletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatDeletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatDeletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatDeletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatDeletionResponseValidationError{}

// Validate checks the field values on ChatUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatUpdateRequestMultiError, or nil if none found.
func (m *ChatUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ChatUpdateRequestMultiError(errors)
	}

	return nil
}

// ChatUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by ChatUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type ChatUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatUpdateRequestMultiError) AllErrors() []error { return m }

// ChatUpdateRequestValidationError is the validation error returned by
// ChatUpdateRequest.Validate if the designated constraints aren't met.
type ChatUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatUpdateRequestValidationError) ErrorName() string {
	return "ChatUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatUpdateRequestValidationError{}

// Validate checks the field values on ChatUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatUpdateResponseMultiError, or nil if none found.
func (m *ChatUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Chat != nil {

		if all {
			switch v := interface{}(m.GetChat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatUpdateResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatUpdateResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatUpdateResponseValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatUpdateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatUpdateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatUpdateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatUpdateResponseMultiError(errors)
	}

	return nil
}

// ChatUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by ChatUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type ChatUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatUpdateResponseMultiError) AllErrors() []error { return m }

// ChatUpdateResponseValidationError is the validation error returned by
// ChatUpdateResponse.Validate if the designated constraints aren't met.
type ChatUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatUpdateResponseValidationError) ErrorName() string {
	return "ChatUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatUpdateResponseValidationError{}

// Validate checks the field values on ChatListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatListRequestMultiError, or nil if none found.
func (m *ChatListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageNumber != nil {
		// no validation rules for PageNumber
	}

	if len(errors) > 0 {
		return ChatListRequestMultiError(errors)
	}

	return nil
}

// ChatListRequestMultiError is an error wrapping multiple validation errors
// returned by ChatListRequest.ValidateAll() if the designated constraints
// aren't met.
type ChatListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatListRequestMultiError) AllErrors() []error { return m }

// ChatListRequestValidationError is the validation error returned by
// ChatListRequest.Validate if the designated constraints aren't met.
type ChatListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatListRequestValidationError) ErrorName() string { return "ChatListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChatListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatListRequestValidationError{}

// Validate checks the field values on ChatListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatListResponseMultiError, or nil if none found.
func (m *ChatListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChat() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatListResponseValidationError{
						field:  fmt.Sprintf("Chat[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatListResponseValidationError{
						field:  fmt.Sprintf("Chat[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatListResponseValidationError{
					field:  fmt.Sprintf("Chat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatListResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatListResponseMultiError(errors)
	}

	return nil
}

// ChatListResponseMultiError is an error wrapping multiple validation errors
// returned by ChatListResponse.ValidateAll() if the designated constraints
// aren't met.
type ChatListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatListResponseMultiError) AllErrors() []error { return m }

// ChatListResponseValidationError is the validation error returned by
// ChatListResponse.Validate if the designated constraints aren't met.
type ChatListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatListResponseValidationError) ErrorName() string { return "ChatListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatListResponseValidationError{}

// Validate checks the field values on ChatStarRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatStarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatStarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatStarRequestMultiError, or nil if none found.
func (m *ChatStarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatStarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Star != nil {
		// no validation rules for Star
	}

	if len(errors) > 0 {
		return ChatStarRequestMultiError(errors)
	}

	return nil
}

// ChatStarRequestMultiError is an error wrapping multiple validation errors
// returned by ChatStarRequest.ValidateAll() if the designated constraints
// aren't met.
type ChatStarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatStarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatStarRequestMultiError) AllErrors() []error { return m }

// ChatStarRequestValidationError is the validation error returned by
// ChatStarRequest.Validate if the designated constraints aren't met.
type ChatStarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStarRequestValidationError) ErrorName() string { return "ChatStarRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChatStarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStarRequestValidationError{}

// Validate checks the field values on ChatStarResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatStarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatStarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatStarResponseMultiError, or nil if none found.
func (m *ChatStarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatStarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Chat != nil {

		if all {
			switch v := interface{}(m.GetChat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatStarResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatStarResponseValidationError{
						field:  "Chat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStarResponseValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if len(errors) > 0 {
		return ChatStarResponseMultiError(errors)
	}

	return nil
}

// ChatStarResponseMultiError is an error wrapping multiple validation errors
// returned by ChatStarResponse.ValidateAll() if the designated constraints
// aren't met.
type ChatStarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatStarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatStarResponseMultiError) AllErrors() []error { return m }

// ChatStarResponseValidationError is the validation error returned by
// ChatStarResponse.Validate if the designated constraints aren't met.
type ChatStarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStarResponseValidationError) ErrorName() string { return "ChatStarResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatStarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStarResponseValidationError{}

// Validate checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompletionResponseMultiError, or nil if none found.
func (m *CompletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompletionResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompletionResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompletionResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.InputTokens != nil {
		// no validation rules for InputTokens
	}

	if m.OutputTokens != nil {
		// no validation rules for OutputTokens
	}

	if m.ImageResolution != nil {
		// no validation rules for ImageResolution
	}

	if m.ImageSteps != nil {
		// no validation rules for ImageSteps
	}

	if len(errors) > 0 {
		return CompletionResponseMultiError(errors)
	}

	return nil
}

// CompletionResponseMultiError is an error wrapping multiple validation errors
// returned by CompletionResponse.ValidateAll() if the designated constraints
// aren't met.
type CompletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompletionResponseMultiError) AllErrors() []error { return m }

// CompletionResponseValidationError is the validation error returned by
// CompletionResponse.Validate if the designated constraints aren't met.
type CompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionResponseValidationError) ErrorName() string {
	return "CompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionResponseValidationError{}

// Validate checks the field values on BasePayload with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BasePayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BasePayload with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BasePayloadMultiError, or
// nil if none found.
func (m *BasePayload) ValidateAll() error {
	return m.validate(true)
}

func (m *BasePayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Url != nil {
		// no validation rules for Url
	}

	if m.Prompt != nil {
		// no validation rules for Prompt
	}

	if len(errors) > 0 {
		return BasePayloadMultiError(errors)
	}

	return nil
}

// BasePayloadMultiError is an error wrapping multiple validation errors
// returned by BasePayload.ValidateAll() if the designated constraints aren't met.
type BasePayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasePayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasePayloadMultiError) AllErrors() []error { return m }

// BasePayloadValidationError is the validation error returned by
// BasePayload.Validate if the designated constraints aren't met.
type BasePayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasePayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasePayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasePayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasePayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasePayloadValidationError) ErrorName() string { return "BasePayloadValidationError" }

// Error satisfies the builtin error interface
func (e BasePayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasePayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasePayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasePayloadValidationError{}

// Validate checks the field values on ChatCompletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionRequestMultiError, or nil if none found.
func (m *ChatCompletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.ModelId != nil {
		// no validation rules for ModelId
	}

	if m.Payload != nil {
		// no validation rules for Payload
	}

	if len(errors) > 0 {
		return ChatCompletionRequestMultiError(errors)
	}

	return nil
}

// ChatCompletionRequestMultiError is an error wrapping multiple validation
// errors returned by ChatCompletionRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatCompletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionRequestMultiError) AllErrors() []error { return m }

// ChatCompletionRequestValidationError is the validation error returned by
// ChatCompletionRequest.Validate if the designated constraints aren't met.
type ChatCompletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionRequestValidationError) ErrorName() string {
	return "ChatCompletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionRequestValidationError{}

// Validate checks the field values on ChatCompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionResponseMultiError, or nil if none found.
func (m *ChatCompletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Completion != nil {

		if all {
			switch v := interface{}(m.GetCompletion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionResponseValidationError{
						field:  "Completion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionResponseValidationError{
						field:  "Completion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompletion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionResponseValidationError{
					field:  "Completion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatCompletionResponseMultiError(errors)
	}

	return nil
}

// ChatCompletionResponseMultiError is an error wrapping multiple validation
// errors returned by ChatCompletionResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatCompletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionResponseMultiError) AllErrors() []error { return m }

// ChatCompletionResponseValidationError is the validation error returned by
// ChatCompletionResponse.Validate if the designated constraints aren't met.
type ChatCompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionResponseValidationError) ErrorName() string {
	return "ChatCompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionResponseValidationError{}
