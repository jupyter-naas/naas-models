// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iam.proto

package iam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _iam_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TokenData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenDataMultiError, or nil
// if none found.
func (m *TokenData) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.ApiKeyId != nil {
		// no validation rules for ApiKeyId
	}

	if m.JwtToken != nil {
		// no validation rules for JwtToken
	}

	if len(errors) > 0 {
		return TokenDataMultiError(errors)
	}

	return nil
}

// TokenDataMultiError is an error wrapping multiple validation errors returned
// by TokenData.ValidateAll() if the designated constraints aren't met.
type TokenDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenDataMultiError) AllErrors() []error { return m }

// TokenDataValidationError is the validation error returned by
// TokenData.Validate if the designated constraints aren't met.
type TokenDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenDataValidationError) ErrorName() string { return "TokenDataValidationError" }

// Error satisfies the builtin error interface
func (e TokenDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenDataValidationError{}

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.FirstName != nil {
		// no validation rules for FirstName
	}

	if m.LastName != nil {
		// no validation rules for LastName
	}

	if m.Company != nil {
		// no validation rules for Company
	}

	if m.Role != nil {
		// no validation rules for Role
	}

	if m.Timezone != nil {
		// no validation rules for Timezone
	}

	if m.ProfilePictureUrl != nil {
		// no validation rules for ProfilePictureUrl
	}

	if m.UserPresentation != nil {
		// no validation rules for UserPresentation
	}

	if m.TargetedUse != nil {
		// no validation rules for TargetedUse
	}

	if m.ProductUpdates != nil {
		// no validation rules for ProductUpdates
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on ImpersonateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImpersonateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImpersonateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImpersonateUserRequestMultiError, or nil if none found.
func (m *ImpersonateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImpersonateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.User.(type) {
	case *ImpersonateUserRequest_UserId:
		if v == nil {
			err := ImpersonateUserRequestValidationError{
				field:  "User",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ImpersonateUserRequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ImpersonateUserRequest_Email:
		if v == nil {
			err := ImpersonateUserRequestValidationError{
				field:  "User",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = ImpersonateUserRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ImpersonateUserRequestMultiError(errors)
	}

	return nil
}

func (m *ImpersonateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ImpersonateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *ImpersonateUserRequest) _validateUuid(uuid string) error {
	if matched := _iam_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ImpersonateUserRequestMultiError is an error wrapping multiple validation
// errors returned by ImpersonateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ImpersonateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImpersonateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImpersonateUserRequestMultiError) AllErrors() []error { return m }

// ImpersonateUserRequestValidationError is the validation error returned by
// ImpersonateUserRequest.Validate if the designated constraints aren't met.
type ImpersonateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImpersonateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImpersonateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImpersonateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImpersonateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImpersonateUserRequestValidationError) ErrorName() string {
	return "ImpersonateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImpersonateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImpersonateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImpersonateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImpersonateUserRequestValidationError{}

// Validate checks the field values on ImpersonateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImpersonateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImpersonateUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImpersonateUserResponseMultiError, or nil if none found.
func (m *ImpersonateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImpersonateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImpersonateUserResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImpersonateUserResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImpersonateUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if len(errors) > 0 {
		return ImpersonateUserResponseMultiError(errors)
	}

	return nil
}

// ImpersonateUserResponseMultiError is an error wrapping multiple validation
// errors returned by ImpersonateUserResponse.ValidateAll() if the designated
// constraints aren't met.
type ImpersonateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImpersonateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImpersonateUserResponseMultiError) AllErrors() []error { return m }

// ImpersonateUserResponseValidationError is the validation error returned by
// ImpersonateUserResponse.Validate if the designated constraints aren't met.
type ImpersonateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImpersonateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImpersonateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImpersonateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImpersonateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImpersonateUserResponseValidationError) ErrorName() string {
	return "ImpersonateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImpersonateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImpersonateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImpersonateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImpersonateUserResponseValidationError{}

// Validate checks the field values on ApiKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiKey with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiKeyMultiError, or nil if none found.
func (m *ApiKey) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.ApiKey != nil {
		// no validation rules for ApiKey
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if len(errors) > 0 {
		return ApiKeyMultiError(errors)
	}

	return nil
}

// ApiKeyMultiError is an error wrapping multiple validation errors returned by
// ApiKey.ValidateAll() if the designated constraints aren't met.
type ApiKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiKeyMultiError) AllErrors() []error { return m }

// ApiKeyValidationError is the validation error returned by ApiKey.Validate if
// the designated constraints aren't met.
type ApiKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiKeyValidationError) ErrorName() string { return "ApiKeyValidationError" }

// Error satisfies the builtin error interface
func (e ApiKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiKeyValidationError{}

// Validate checks the field values on ApiKeyCreation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiKeyCreation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiKeyCreation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiKeyCreationMultiError,
// or nil if none found.
func (m *ApiKeyCreation) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiKeyCreation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ApiKeyCreationMultiError(errors)
	}

	return nil
}

// ApiKeyCreationMultiError is an error wrapping multiple validation errors
// returned by ApiKeyCreation.ValidateAll() if the designated constraints
// aren't met.
type ApiKeyCreationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiKeyCreationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiKeyCreationMultiError) AllErrors() []error { return m }

// ApiKeyCreationValidationError is the validation error returned by
// ApiKeyCreation.Validate if the designated constraints aren't met.
type ApiKeyCreationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiKeyCreationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiKeyCreationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiKeyCreationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiKeyCreationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiKeyCreationValidationError) ErrorName() string { return "ApiKeyCreationValidationError" }

// Error satisfies the builtin error interface
func (e ApiKeyCreationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiKeyCreation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiKeyCreationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiKeyCreationValidationError{}

// Validate checks the field values on CreateApiKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApiKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApiKeyRequestMultiError, or nil if none found.
func (m *CreateApiKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ApiKey != nil {

		if all {
			switch v := interface{}(m.GetApiKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateApiKeyRequestValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateApiKeyRequestValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateApiKeyRequestValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateApiKeyRequestMultiError(errors)
	}

	return nil
}

// CreateApiKeyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateApiKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateApiKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiKeyRequestMultiError) AllErrors() []error { return m }

// CreateApiKeyRequestValidationError is the validation error returned by
// CreateApiKeyRequest.Validate if the designated constraints aren't met.
type CreateApiKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiKeyRequestValidationError) ErrorName() string {
	return "CreateApiKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApiKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiKeyRequestValidationError{}

// Validate checks the field values on CreateApiKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApiKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApiKeyResponseMultiError, or nil if none found.
func (m *CreateApiKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateApiKeyResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateApiKeyResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateApiKeyResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ApiKey != nil {

		if all {
			switch v := interface{}(m.GetApiKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateApiKeyResponseValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateApiKeyResponseValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateApiKeyResponseMultiError(errors)
	}

	return nil
}

// CreateApiKeyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateApiKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateApiKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiKeyResponseMultiError) AllErrors() []error { return m }

// CreateApiKeyResponseValidationError is the validation error returned by
// CreateApiKeyResponse.Validate if the designated constraints aren't met.
type CreateApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiKeyResponseValidationError) ErrorName() string {
	return "CreateApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiKeyResponseValidationError{}

// Validate checks the field values on ListApiKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApiKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApiKeysRequestMultiError, or nil if none found.
func (m *ListApiKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return ListApiKeysRequestMultiError(errors)
	}

	return nil
}

// ListApiKeysRequestMultiError is an error wrapping multiple validation errors
// returned by ListApiKeysRequest.ValidateAll() if the designated constraints
// aren't met.
type ListApiKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiKeysRequestMultiError) AllErrors() []error { return m }

// ListApiKeysRequestValidationError is the validation error returned by
// ListApiKeysRequest.Validate if the designated constraints aren't met.
type ListApiKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiKeysRequestValidationError) ErrorName() string {
	return "ListApiKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApiKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiKeysRequestValidationError{}

// Validate checks the field values on ListApiKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApiKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApiKeysResponseMultiError, or nil if none found.
func (m *ListApiKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApiKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApiKeysResponseValidationError{
						field:  fmt.Sprintf("ApiKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApiKeysResponseValidationError{
						field:  fmt.Sprintf("ApiKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApiKeysResponseValidationError{
					field:  fmt.Sprintf("ApiKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApiKeysResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApiKeysResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApiKeysResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListApiKeysResponseMultiError(errors)
	}

	return nil
}

// ListApiKeysResponseMultiError is an error wrapping multiple validation
// errors returned by ListApiKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListApiKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiKeysResponseMultiError) AllErrors() []error { return m }

// ListApiKeysResponseValidationError is the validation error returned by
// ListApiKeysResponse.Validate if the designated constraints aren't met.
type ListApiKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiKeysResponseValidationError) ErrorName() string {
	return "ListApiKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApiKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiKeysResponseValidationError{}
