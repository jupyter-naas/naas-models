// fork from https://github.com/envoyproxy/protoc-gen-validate/blob/main/validate/validate.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.26.1
// source: p2p_validate.proto

package p2p_validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OneofRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Define whether the field of oneof is optional
	Optional      []string `protobuf:"bytes,1,rep,name=optional,proto3" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OneofRules) Reset() {
	*x = OneofRules{}
	mi := &file_p2p_validate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneofRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofRules) ProtoMessage() {}

func (x *OneofRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofRules.ProtoReflect.Descriptor instead.
func (*OneofRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{0}
}

func (x *OneofRules) GetOptional() []string {
	if x != nil {
		return x.Optional
	}
	return nil
}

// FieldRules encapsulates the rules for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
type FieldRules struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Message *MessageRules          `protobuf:"bytes,17,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*FieldRules_Float
	//	*FieldRules_Double
	//	*FieldRules_Int32
	//	*FieldRules_Int64
	//	*FieldRules_Uint32
	//	*FieldRules_Uint64
	//	*FieldRules_Sint32
	//	*FieldRules_Sint64
	//	*FieldRules_Fixed32
	//	*FieldRules_Fixed64
	//	*FieldRules_Sfixed32
	//	*FieldRules_Sfixed64
	//	*FieldRules_Bool
	//	*FieldRules_String_
	//	*FieldRules_Bytes
	//	*FieldRules_Enum
	//	*FieldRules_Repeated
	//	*FieldRules_Map
	//	*FieldRules_Any
	//	*FieldRules_Duration
	//	*FieldRules_Timestamp
	Type          isFieldRules_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldRules) Reset() {
	*x = FieldRules{}
	mi := &file_p2p_validate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRules) ProtoMessage() {}

func (x *FieldRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRules.ProtoReflect.Descriptor instead.
func (*FieldRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{1}
}

func (x *FieldRules) GetMessage() *MessageRules {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FieldRules) GetType() isFieldRules_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldRules) GetFloat() *FloatRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *FieldRules) GetDouble() *DoubleRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *FieldRules) GetInt32() *Int32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *FieldRules) GetInt64() *Int64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *FieldRules) GetUint32() *UInt32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *FieldRules) GetUint64() *UInt64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *FieldRules) GetSint32() *SInt32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *FieldRules) GetSint64() *SInt64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *FieldRules) GetFixed32() *Fixed32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *FieldRules) GetFixed64() *Fixed64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *FieldRules) GetSfixed32() *SFixed32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *FieldRules) GetSfixed64() *SFixed64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *FieldRules) GetBool() *BoolRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *FieldRules) GetString_() *StringRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *FieldRules) GetBytes() *BytesRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *FieldRules) GetEnum() *EnumRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *FieldRules) GetRepeated() *RepeatedRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Repeated); ok {
			return x.Repeated
		}
	}
	return nil
}

func (x *FieldRules) GetMap() *MapRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *FieldRules) GetAny() *AnyRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *FieldRules) GetDuration() *DurationRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *FieldRules) GetTimestamp() *TimestampRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

type isFieldRules_Type interface {
	isFieldRules_Type()
}

type FieldRules_Float struct {
	// Scalar Field Types
	Float *FloatRules `protobuf:"bytes,1,opt,name=float,proto3,oneof"`
}

type FieldRules_Double struct {
	Double *DoubleRules `protobuf:"bytes,2,opt,name=double,proto3,oneof"`
}

type FieldRules_Int32 struct {
	Int32 *Int32Rules `protobuf:"bytes,3,opt,name=int32,proto3,oneof"`
}

type FieldRules_Int64 struct {
	Int64 *Int64Rules `protobuf:"bytes,4,opt,name=int64,proto3,oneof"`
}

type FieldRules_Uint32 struct {
	Uint32 *UInt32Rules `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"`
}

type FieldRules_Uint64 struct {
	Uint64 *UInt64Rules `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"`
}

type FieldRules_Sint32 struct {
	Sint32 *SInt32Rules `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"`
}

type FieldRules_Sint64 struct {
	Sint64 *SInt64Rules `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"`
}

type FieldRules_Fixed32 struct {
	Fixed32 *Fixed32Rules `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"`
}

type FieldRules_Fixed64 struct {
	Fixed64 *Fixed64Rules `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"`
}

type FieldRules_Sfixed32 struct {
	Sfixed32 *SFixed32Rules `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"`
}

type FieldRules_Sfixed64 struct {
	Sfixed64 *SFixed64Rules `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"`
}

type FieldRules_Bool struct {
	Bool *BoolRules `protobuf:"bytes,13,opt,name=bool,proto3,oneof"`
}

type FieldRules_String_ struct {
	String_ *StringRules `protobuf:"bytes,14,opt,name=string,proto3,oneof"`
}

type FieldRules_Bytes struct {
	Bytes *BytesRules `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"`
}

type FieldRules_Enum struct {
	// Complex Field Types
	Enum *EnumRules `protobuf:"bytes,16,opt,name=enum,proto3,oneof"`
}

type FieldRules_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,18,opt,name=repeated,proto3,oneof"`
}

type FieldRules_Map struct {
	Map *MapRules `protobuf:"bytes,19,opt,name=map,proto3,oneof"`
}

type FieldRules_Any struct {
	// Well-Known Field Types
	Any *AnyRules `protobuf:"bytes,20,opt,name=any,proto3,oneof"`
}

type FieldRules_Duration struct {
	Duration *DurationRules `protobuf:"bytes,21,opt,name=duration,proto3,oneof"`
}

type FieldRules_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,22,opt,name=timestamp,proto3,oneof"`
}

func (*FieldRules_Float) isFieldRules_Type() {}

func (*FieldRules_Double) isFieldRules_Type() {}

func (*FieldRules_Int32) isFieldRules_Type() {}

func (*FieldRules_Int64) isFieldRules_Type() {}

func (*FieldRules_Uint32) isFieldRules_Type() {}

func (*FieldRules_Uint64) isFieldRules_Type() {}

func (*FieldRules_Sint32) isFieldRules_Type() {}

func (*FieldRules_Sint64) isFieldRules_Type() {}

func (*FieldRules_Fixed32) isFieldRules_Type() {}

func (*FieldRules_Fixed64) isFieldRules_Type() {}

func (*FieldRules_Sfixed32) isFieldRules_Type() {}

func (*FieldRules_Sfixed64) isFieldRules_Type() {}

func (*FieldRules_Bool) isFieldRules_Type() {}

func (*FieldRules_String_) isFieldRules_Type() {}

func (*FieldRules_Bytes) isFieldRules_Type() {}

func (*FieldRules_Enum) isFieldRules_Type() {}

func (*FieldRules_Repeated) isFieldRules_Type() {}

func (*FieldRules_Map) isFieldRules_Type() {}

func (*FieldRules_Any) isFieldRules_Type() {}

func (*FieldRules_Duration) isFieldRules_Type() {}

func (*FieldRules_Timestamp) isFieldRules_Type() {}

// FloatRules describes the constraints applied to `float` values
type FloatRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *float32 `protobuf:"fixed32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *float32 `protobuf:"fixed32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *float32 `protobuf:"fixed32,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *float32 `protobuf:"fixed32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *float32 `protobuf:"fixed32,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []float32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []float32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*FloatRules_Default
	//	*FloatRules_DefaultFactory
	//	*FloatRules_MissDefault
	//	*FloatRules_Required
	//	*FloatRules_DefaultTemplate
	DefaultConfig isFloatRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*FloatRules_Example
	//	*FloatRules_ExampleFactory
	ExampleConfig isFloatRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatRules) Reset() {
	*x = FloatRules{}
	mi := &file_p2p_validate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRules) ProtoMessage() {}

func (x *FloatRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRules.ProtoReflect.Descriptor instead.
func (*FloatRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{2}
}

func (x *FloatRules) GetConst() float32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *FloatRules) GetLt() float32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FloatRules) GetLe() float32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FloatRules) GetGt() float32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FloatRules) GetGe() float32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FloatRules) GetIn() []float32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FloatRules) GetNotIn() []float32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *FloatRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *FloatRules) GetDefaultConfig() isFloatRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *FloatRules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*FloatRules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *FloatRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*FloatRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *FloatRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*FloatRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *FloatRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*FloatRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *FloatRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*FloatRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *FloatRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *FloatRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FloatRules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *FloatRules) GetExampleConfig() isFloatRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *FloatRules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*FloatRules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *FloatRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*FloatRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *FloatRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *FloatRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *FloatRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FloatRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isFloatRules_DefaultConfig interface {
	isFloatRules_DefaultConfig()
}

type FloatRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type FloatRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type FloatRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type FloatRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type FloatRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*FloatRules_Default) isFloatRules_DefaultConfig() {}

func (*FloatRules_DefaultFactory) isFloatRules_DefaultConfig() {}

func (*FloatRules_MissDefault) isFloatRules_DefaultConfig() {}

func (*FloatRules_Required) isFloatRules_DefaultConfig() {}

func (*FloatRules_DefaultTemplate) isFloatRules_DefaultConfig() {}

type isFloatRules_ExampleConfig interface {
	isFloatRules_ExampleConfig()
}

type FloatRules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type FloatRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*FloatRules_Example) isFloatRules_ExampleConfig() {}

func (*FloatRules_ExampleFactory) isFloatRules_ExampleConfig() {}

// DoubleRules describes the constraints applied to `double` values
type DoubleRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *float64 `protobuf:"fixed64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *float64 `protobuf:"fixed64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *float64 `protobuf:"fixed64,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *float64 `protobuf:"fixed64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *float64 `protobuf:"fixed64,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []float64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []float64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*DoubleRules_Default
	//	*DoubleRules_DefaultFactory
	//	*DoubleRules_MissDefault
	//	*DoubleRules_Required
	//	*DoubleRules_DefaultTemplate
	DefaultConfig isDoubleRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*DoubleRules_Example
	//	*DoubleRules_ExampleFactory
	ExampleConfig isDoubleRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoubleRules) Reset() {
	*x = DoubleRules{}
	mi := &file_p2p_validate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRules) ProtoMessage() {}

func (x *DoubleRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRules.ProtoReflect.Descriptor instead.
func (*DoubleRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{3}
}

func (x *DoubleRules) GetConst() float64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *DoubleRules) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *DoubleRules) GetLe() float64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *DoubleRules) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *DoubleRules) GetGe() float64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *DoubleRules) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DoubleRules) GetNotIn() []float64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *DoubleRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *DoubleRules) GetDefaultConfig() isDoubleRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *DoubleRules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DoubleRules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *DoubleRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DoubleRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *DoubleRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DoubleRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *DoubleRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DoubleRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *DoubleRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DoubleRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *DoubleRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *DoubleRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DoubleRules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *DoubleRules) GetExampleConfig() isDoubleRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *DoubleRules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*DoubleRules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *DoubleRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*DoubleRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *DoubleRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *DoubleRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DoubleRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *DoubleRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isDoubleRules_DefaultConfig interface {
	isDoubleRules_DefaultConfig()
}

type DoubleRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type DoubleRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type DoubleRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type DoubleRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type DoubleRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*DoubleRules_Default) isDoubleRules_DefaultConfig() {}

func (*DoubleRules_DefaultFactory) isDoubleRules_DefaultConfig() {}

func (*DoubleRules_MissDefault) isDoubleRules_DefaultConfig() {}

func (*DoubleRules_Required) isDoubleRules_DefaultConfig() {}

func (*DoubleRules_DefaultTemplate) isDoubleRules_DefaultConfig() {}

type isDoubleRules_ExampleConfig interface {
	isDoubleRules_ExampleConfig()
}

type DoubleRules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type DoubleRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*DoubleRules_Example) isDoubleRules_ExampleConfig() {}

func (*DoubleRules_ExampleFactory) isDoubleRules_ExampleConfig() {}

// Int32Rules describes the constraints applied to `int32` values
type Int32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int32 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int32 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *int32 `protobuf:"varint,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int32 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *int32 `protobuf:"varint,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*Int32Rules_Default
	//	*Int32Rules_DefaultFactory
	//	*Int32Rules_MissDefault
	//	*Int32Rules_Required
	//	*Int32Rules_DefaultTemplate
	DefaultConfig isInt32Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*Int32Rules_Example
	//	*Int32Rules_ExampleFactory
	ExampleConfig isInt32Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32Rules) Reset() {
	*x = Int32Rules{}
	mi := &file_p2p_validate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Rules) ProtoMessage() {}

func (x *Int32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Rules.ProtoReflect.Descriptor instead.
func (*Int32Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{4}
}

func (x *Int32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Int32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int32Rules) GetLe() int32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *Int32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int32Rules) GetGe() int32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *Int32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Int32Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Int32Rules) GetDefaultConfig() isInt32Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *Int32Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int32Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *Int32Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int32Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *Int32Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int32Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *Int32Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int32Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *Int32Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int32Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *Int32Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Int32Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Int32Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *Int32Rules) GetExampleConfig() isInt32Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *Int32Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Int32Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *Int32Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Int32Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *Int32Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *Int32Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Int32Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Int32Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isInt32Rules_DefaultConfig interface {
	isInt32Rules_DefaultConfig()
}

type Int32Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type Int32Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type Int32Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type Int32Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type Int32Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*Int32Rules_Default) isInt32Rules_DefaultConfig() {}

func (*Int32Rules_DefaultFactory) isInt32Rules_DefaultConfig() {}

func (*Int32Rules_MissDefault) isInt32Rules_DefaultConfig() {}

func (*Int32Rules_Required) isInt32Rules_DefaultConfig() {}

func (*Int32Rules_DefaultTemplate) isInt32Rules_DefaultConfig() {}

type isInt32Rules_ExampleConfig interface {
	isInt32Rules_ExampleConfig()
}

type Int32Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type Int32Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*Int32Rules_Example) isInt32Rules_ExampleConfig() {}

func (*Int32Rules_ExampleFactory) isInt32Rules_ExampleConfig() {}

// Int64Rules describes the constraints applied to `int64` values
type Int64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int64 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int64 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *int64 `protobuf:"varint,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int64 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *int64 `protobuf:"varint,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*Int64Rules_Default
	//	*Int64Rules_DefaultFactory
	//	*Int64Rules_MissDefault
	//	*Int64Rules_Required
	//	*Int64Rules_DefaultTemplate
	DefaultConfig isInt64Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*Int64Rules_Example
	//	*Int64Rules_ExampleFactory
	ExampleConfig isInt64Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Rules) Reset() {
	*x = Int64Rules{}
	mi := &file_p2p_validate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Rules) ProtoMessage() {}

func (x *Int64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Rules.ProtoReflect.Descriptor instead.
func (*Int64Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{5}
}

func (x *Int64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Int64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int64Rules) GetLe() int64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *Int64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int64Rules) GetGe() int64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *Int64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Int64Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Int64Rules) GetDefaultConfig() isInt64Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *Int64Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int64Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *Int64Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int64Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *Int64Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int64Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *Int64Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int64Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *Int64Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Int64Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *Int64Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Int64Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Int64Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *Int64Rules) GetExampleConfig() isInt64Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *Int64Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Int64Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *Int64Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Int64Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *Int64Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *Int64Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Int64Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Int64Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isInt64Rules_DefaultConfig interface {
	isInt64Rules_DefaultConfig()
}

type Int64Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type Int64Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type Int64Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type Int64Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type Int64Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*Int64Rules_Default) isInt64Rules_DefaultConfig() {}

func (*Int64Rules_DefaultFactory) isInt64Rules_DefaultConfig() {}

func (*Int64Rules_MissDefault) isInt64Rules_DefaultConfig() {}

func (*Int64Rules_Required) isInt64Rules_DefaultConfig() {}

func (*Int64Rules_DefaultTemplate) isInt64Rules_DefaultConfig() {}

type isInt64Rules_ExampleConfig interface {
	isInt64Rules_ExampleConfig()
}

type Int64Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type Int64Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*Int64Rules_Example) isInt64Rules_ExampleConfig() {}

func (*Int64Rules_ExampleFactory) isInt64Rules_ExampleConfig() {}

// UInt32Rules describes the constraints applied to `uint32` values
type UInt32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *uint32 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *uint32 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *uint32 `protobuf:"varint,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *uint32 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *uint32 `protobuf:"varint,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*UInt32Rules_Default
	//	*UInt32Rules_DefaultFactory
	//	*UInt32Rules_MissDefault
	//	*UInt32Rules_Required
	//	*UInt32Rules_DefaultTemplate
	DefaultConfig isUInt32Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*UInt32Rules_Example
	//	*UInt32Rules_ExampleFactory
	ExampleConfig isUInt32Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UInt32Rules) Reset() {
	*x = UInt32Rules{}
	mi := &file_p2p_validate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Rules) ProtoMessage() {}

func (x *UInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Rules.ProtoReflect.Descriptor instead.
func (*UInt32Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{6}
}

func (x *UInt32Rules) GetConst() uint32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *UInt32Rules) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt32Rules) GetLe() uint32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *UInt32Rules) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt32Rules) GetGe() uint32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *UInt32Rules) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UInt32Rules) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *UInt32Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *UInt32Rules) GetDefaultConfig() isUInt32Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *UInt32Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt32Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *UInt32Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt32Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *UInt32Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt32Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *UInt32Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt32Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *UInt32Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt32Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *UInt32Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UInt32Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UInt32Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *UInt32Rules) GetExampleConfig() isUInt32Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *UInt32Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*UInt32Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *UInt32Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*UInt32Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *UInt32Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *UInt32Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UInt32Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UInt32Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isUInt32Rules_DefaultConfig interface {
	isUInt32Rules_DefaultConfig()
}

type UInt32Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type UInt32Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type UInt32Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type UInt32Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type UInt32Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*UInt32Rules_Default) isUInt32Rules_DefaultConfig() {}

func (*UInt32Rules_DefaultFactory) isUInt32Rules_DefaultConfig() {}

func (*UInt32Rules_MissDefault) isUInt32Rules_DefaultConfig() {}

func (*UInt32Rules_Required) isUInt32Rules_DefaultConfig() {}

func (*UInt32Rules_DefaultTemplate) isUInt32Rules_DefaultConfig() {}

type isUInt32Rules_ExampleConfig interface {
	isUInt32Rules_ExampleConfig()
}

type UInt32Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type UInt32Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*UInt32Rules_Example) isUInt32Rules_ExampleConfig() {}

func (*UInt32Rules_ExampleFactory) isUInt32Rules_ExampleConfig() {}

// UInt64Rules describes the constraints applied to `uint64` values
type UInt64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *uint64 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *uint64 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *uint64 `protobuf:"varint,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *uint64 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *uint64 `protobuf:"varint,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*UInt64Rules_Default
	//	*UInt64Rules_DefaultFactory
	//	*UInt64Rules_MissDefault
	//	*UInt64Rules_Required
	//	*UInt64Rules_DefaultTemplate
	DefaultConfig isUInt64Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*UInt64Rules_Example
	//	*UInt64Rules_ExampleFactory
	ExampleConfig isUInt64Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UInt64Rules) Reset() {
	*x = UInt64Rules{}
	mi := &file_p2p_validate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Rules) ProtoMessage() {}

func (x *UInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Rules.ProtoReflect.Descriptor instead.
func (*UInt64Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{7}
}

func (x *UInt64Rules) GetConst() uint64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *UInt64Rules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt64Rules) GetLe() uint64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *UInt64Rules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt64Rules) GetGe() uint64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *UInt64Rules) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UInt64Rules) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *UInt64Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *UInt64Rules) GetDefaultConfig() isUInt64Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *UInt64Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt64Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *UInt64Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt64Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *UInt64Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt64Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *UInt64Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt64Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *UInt64Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*UInt64Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *UInt64Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UInt64Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UInt64Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *UInt64Rules) GetExampleConfig() isUInt64Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *UInt64Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*UInt64Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *UInt64Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*UInt64Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *UInt64Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *UInt64Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UInt64Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UInt64Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isUInt64Rules_DefaultConfig interface {
	isUInt64Rules_DefaultConfig()
}

type UInt64Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type UInt64Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type UInt64Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type UInt64Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type UInt64Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*UInt64Rules_Default) isUInt64Rules_DefaultConfig() {}

func (*UInt64Rules_DefaultFactory) isUInt64Rules_DefaultConfig() {}

func (*UInt64Rules_MissDefault) isUInt64Rules_DefaultConfig() {}

func (*UInt64Rules_Required) isUInt64Rules_DefaultConfig() {}

func (*UInt64Rules_DefaultTemplate) isUInt64Rules_DefaultConfig() {}

type isUInt64Rules_ExampleConfig interface {
	isUInt64Rules_ExampleConfig()
}

type UInt64Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type UInt64Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*UInt64Rules_Example) isUInt64Rules_ExampleConfig() {}

func (*UInt64Rules_ExampleFactory) isUInt64Rules_ExampleConfig() {}

// SInt32Rules describes the constraints applied to `sint32` values
type SInt32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int32 `protobuf:"zigzag32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int32 `protobuf:"zigzag32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *int32 `protobuf:"zigzag32,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int32 `protobuf:"zigzag32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *int32 `protobuf:"zigzag32,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"zigzag32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"zigzag32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*SInt32Rules_Default
	//	*SInt32Rules_DefaultFactory
	//	*SInt32Rules_MissDefault
	//	*SInt32Rules_Required
	//	*SInt32Rules_DefaultTemplate
	DefaultConfig isSInt32Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*SInt32Rules_Example
	//	*SInt32Rules_ExampleFactory
	ExampleConfig isSInt32Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SInt32Rules) Reset() {
	*x = SInt32Rules{}
	mi := &file_p2p_validate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt32Rules) ProtoMessage() {}

func (x *SInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt32Rules.ProtoReflect.Descriptor instead.
func (*SInt32Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{8}
}

func (x *SInt32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SInt32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SInt32Rules) GetLe() int32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *SInt32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SInt32Rules) GetGe() int32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *SInt32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SInt32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SInt32Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *SInt32Rules) GetDefaultConfig() isSInt32Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *SInt32Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt32Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *SInt32Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt32Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *SInt32Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt32Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *SInt32Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt32Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *SInt32Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt32Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *SInt32Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SInt32Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SInt32Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *SInt32Rules) GetExampleConfig() isSInt32Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *SInt32Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SInt32Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *SInt32Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SInt32Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *SInt32Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *SInt32Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SInt32Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SInt32Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isSInt32Rules_DefaultConfig interface {
	isSInt32Rules_DefaultConfig()
}

type SInt32Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type SInt32Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type SInt32Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type SInt32Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type SInt32Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*SInt32Rules_Default) isSInt32Rules_DefaultConfig() {}

func (*SInt32Rules_DefaultFactory) isSInt32Rules_DefaultConfig() {}

func (*SInt32Rules_MissDefault) isSInt32Rules_DefaultConfig() {}

func (*SInt32Rules_Required) isSInt32Rules_DefaultConfig() {}

func (*SInt32Rules_DefaultTemplate) isSInt32Rules_DefaultConfig() {}

type isSInt32Rules_ExampleConfig interface {
	isSInt32Rules_ExampleConfig()
}

type SInt32Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type SInt32Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*SInt32Rules_Example) isSInt32Rules_ExampleConfig() {}

func (*SInt32Rules_ExampleFactory) isSInt32Rules_ExampleConfig() {}

// SInt64Rules describes the constraints applied to `sint64` values
type SInt64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int64 `protobuf:"zigzag64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int64 `protobuf:"zigzag64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *int64 `protobuf:"zigzag64,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int64 `protobuf:"zigzag64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *int64 `protobuf:"zigzag64,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"zigzag64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"zigzag64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*SInt64Rules_Default
	//	*SInt64Rules_DefaultFactory
	//	*SInt64Rules_MissDefault
	//	*SInt64Rules_Required
	//	*SInt64Rules_DefaultTemplate
	DefaultConfig isSInt64Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*SInt64Rules_Example
	//	*SInt64Rules_ExampleFactory
	ExampleConfig isSInt64Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SInt64Rules) Reset() {
	*x = SInt64Rules{}
	mi := &file_p2p_validate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt64Rules) ProtoMessage() {}

func (x *SInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt64Rules.ProtoReflect.Descriptor instead.
func (*SInt64Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{9}
}

func (x *SInt64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SInt64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SInt64Rules) GetLe() int64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *SInt64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SInt64Rules) GetGe() int64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *SInt64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SInt64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SInt64Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *SInt64Rules) GetDefaultConfig() isSInt64Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *SInt64Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt64Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *SInt64Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt64Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *SInt64Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt64Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *SInt64Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt64Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *SInt64Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SInt64Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *SInt64Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SInt64Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SInt64Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *SInt64Rules) GetExampleConfig() isSInt64Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *SInt64Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SInt64Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *SInt64Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SInt64Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *SInt64Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *SInt64Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SInt64Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SInt64Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isSInt64Rules_DefaultConfig interface {
	isSInt64Rules_DefaultConfig()
}

type SInt64Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type SInt64Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type SInt64Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type SInt64Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type SInt64Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*SInt64Rules_Default) isSInt64Rules_DefaultConfig() {}

func (*SInt64Rules_DefaultFactory) isSInt64Rules_DefaultConfig() {}

func (*SInt64Rules_MissDefault) isSInt64Rules_DefaultConfig() {}

func (*SInt64Rules_Required) isSInt64Rules_DefaultConfig() {}

func (*SInt64Rules_DefaultTemplate) isSInt64Rules_DefaultConfig() {}

type isSInt64Rules_ExampleConfig interface {
	isSInt64Rules_ExampleConfig()
}

type SInt64Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type SInt64Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*SInt64Rules_Example) isSInt64Rules_ExampleConfig() {}

func (*SInt64Rules_ExampleFactory) isSInt64Rules_ExampleConfig() {}

// Fixed32Rules describes the constraints applied to `fixed32` values
type Fixed32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *uint32 `protobuf:"fixed32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *uint32 `protobuf:"fixed32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *uint32 `protobuf:"fixed32,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *uint32 `protobuf:"fixed32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *uint32 `protobuf:"fixed32,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*Fixed32Rules_Default
	//	*Fixed32Rules_DefaultFactory
	//	*Fixed32Rules_MissDefault
	//	*Fixed32Rules_Required
	//	*Fixed32Rules_DefaultTemplate
	DefaultConfig isFixed32Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*Fixed32Rules_Example
	//	*Fixed32Rules_ExampleFactory
	ExampleConfig isFixed32Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed32Rules) Reset() {
	*x = Fixed32Rules{}
	mi := &file_p2p_validate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed32Rules) ProtoMessage() {}

func (x *Fixed32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed32Rules.ProtoReflect.Descriptor instead.
func (*Fixed32Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{10}
}

func (x *Fixed32Rules) GetConst() uint32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Fixed32Rules) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Fixed32Rules) GetLe() uint32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *Fixed32Rules) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Fixed32Rules) GetGe() uint32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *Fixed32Rules) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Fixed32Rules) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Fixed32Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Fixed32Rules) GetDefaultConfig() isFixed32Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *Fixed32Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed32Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *Fixed32Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed32Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *Fixed32Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed32Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *Fixed32Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed32Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *Fixed32Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed32Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *Fixed32Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Fixed32Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Fixed32Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *Fixed32Rules) GetExampleConfig() isFixed32Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *Fixed32Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Fixed32Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *Fixed32Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Fixed32Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *Fixed32Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *Fixed32Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Fixed32Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Fixed32Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isFixed32Rules_DefaultConfig interface {
	isFixed32Rules_DefaultConfig()
}

type Fixed32Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type Fixed32Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type Fixed32Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type Fixed32Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type Fixed32Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*Fixed32Rules_Default) isFixed32Rules_DefaultConfig() {}

func (*Fixed32Rules_DefaultFactory) isFixed32Rules_DefaultConfig() {}

func (*Fixed32Rules_MissDefault) isFixed32Rules_DefaultConfig() {}

func (*Fixed32Rules_Required) isFixed32Rules_DefaultConfig() {}

func (*Fixed32Rules_DefaultTemplate) isFixed32Rules_DefaultConfig() {}

type isFixed32Rules_ExampleConfig interface {
	isFixed32Rules_ExampleConfig()
}

type Fixed32Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type Fixed32Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*Fixed32Rules_Example) isFixed32Rules_ExampleConfig() {}

func (*Fixed32Rules_ExampleFactory) isFixed32Rules_ExampleConfig() {}

// Fixed64Rules describes the constraints applied to `fixed64` values
type Fixed64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *uint64 `protobuf:"fixed64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *uint64 `protobuf:"fixed64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *uint64 `protobuf:"fixed64,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *uint64 `protobuf:"fixed64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *uint64 `protobuf:"fixed64,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*Fixed64Rules_Default
	//	*Fixed64Rules_DefaultFactory
	//	*Fixed64Rules_MissDefault
	//	*Fixed64Rules_Required
	//	*Fixed64Rules_DefaultTemplate
	DefaultConfig isFixed64Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*Fixed64Rules_Example
	//	*Fixed64Rules_ExampleFactory
	ExampleConfig isFixed64Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed64Rules) Reset() {
	*x = Fixed64Rules{}
	mi := &file_p2p_validate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed64Rules) ProtoMessage() {}

func (x *Fixed64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed64Rules.ProtoReflect.Descriptor instead.
func (*Fixed64Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{11}
}

func (x *Fixed64Rules) GetConst() uint64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Fixed64Rules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Fixed64Rules) GetLe() uint64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *Fixed64Rules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Fixed64Rules) GetGe() uint64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *Fixed64Rules) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Fixed64Rules) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Fixed64Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Fixed64Rules) GetDefaultConfig() isFixed64Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *Fixed64Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed64Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *Fixed64Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed64Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *Fixed64Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed64Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *Fixed64Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed64Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *Fixed64Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*Fixed64Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *Fixed64Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Fixed64Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Fixed64Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *Fixed64Rules) GetExampleConfig() isFixed64Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *Fixed64Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Fixed64Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *Fixed64Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*Fixed64Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *Fixed64Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *Fixed64Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Fixed64Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Fixed64Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isFixed64Rules_DefaultConfig interface {
	isFixed64Rules_DefaultConfig()
}

type Fixed64Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type Fixed64Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type Fixed64Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type Fixed64Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type Fixed64Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*Fixed64Rules_Default) isFixed64Rules_DefaultConfig() {}

func (*Fixed64Rules_DefaultFactory) isFixed64Rules_DefaultConfig() {}

func (*Fixed64Rules_MissDefault) isFixed64Rules_DefaultConfig() {}

func (*Fixed64Rules_Required) isFixed64Rules_DefaultConfig() {}

func (*Fixed64Rules_DefaultTemplate) isFixed64Rules_DefaultConfig() {}

type isFixed64Rules_ExampleConfig interface {
	isFixed64Rules_ExampleConfig()
}

type Fixed64Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type Fixed64Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*Fixed64Rules_Example) isFixed64Rules_ExampleConfig() {}

func (*Fixed64Rules_ExampleFactory) isFixed64Rules_ExampleConfig() {}

// SFixed32Rules describes the constraints applied to `sfixed32` values
type SFixed32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int32 `protobuf:"fixed32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int32 `protobuf:"fixed32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *int32 `protobuf:"fixed32,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int32 `protobuf:"fixed32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *int32 `protobuf:"fixed32,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*SFixed32Rules_Default
	//	*SFixed32Rules_DefaultFactory
	//	*SFixed32Rules_MissDefault
	//	*SFixed32Rules_Required
	//	*SFixed32Rules_DefaultTemplate
	DefaultConfig isSFixed32Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*SFixed32Rules_Example
	//	*SFixed32Rules_ExampleFactory
	ExampleConfig isSFixed32Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SFixed32Rules) Reset() {
	*x = SFixed32Rules{}
	mi := &file_p2p_validate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFixed32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed32Rules) ProtoMessage() {}

func (x *SFixed32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed32Rules.ProtoReflect.Descriptor instead.
func (*SFixed32Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{12}
}

func (x *SFixed32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SFixed32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SFixed32Rules) GetLe() int32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *SFixed32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SFixed32Rules) GetGe() int32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *SFixed32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SFixed32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SFixed32Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *SFixed32Rules) GetDefaultConfig() isSFixed32Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *SFixed32Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed32Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *SFixed32Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed32Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *SFixed32Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed32Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *SFixed32Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed32Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *SFixed32Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed32Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *SFixed32Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SFixed32Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SFixed32Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *SFixed32Rules) GetExampleConfig() isSFixed32Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *SFixed32Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SFixed32Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *SFixed32Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SFixed32Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *SFixed32Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *SFixed32Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SFixed32Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SFixed32Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isSFixed32Rules_DefaultConfig interface {
	isSFixed32Rules_DefaultConfig()
}

type SFixed32Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type SFixed32Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type SFixed32Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type SFixed32Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type SFixed32Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*SFixed32Rules_Default) isSFixed32Rules_DefaultConfig() {}

func (*SFixed32Rules_DefaultFactory) isSFixed32Rules_DefaultConfig() {}

func (*SFixed32Rules_MissDefault) isSFixed32Rules_DefaultConfig() {}

func (*SFixed32Rules_Required) isSFixed32Rules_DefaultConfig() {}

func (*SFixed32Rules_DefaultTemplate) isSFixed32Rules_DefaultConfig() {}

type isSFixed32Rules_ExampleConfig interface {
	isSFixed32Rules_ExampleConfig()
}

type SFixed32Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type SFixed32Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*SFixed32Rules_Example) isSFixed32Rules_ExampleConfig() {}

func (*SFixed32Rules_ExampleFactory) isSFixed32Rules_ExampleConfig() {}

// SFixed64Rules describes the constraints applied to `sfixed64` values
type SFixed64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int64 `protobuf:"fixed64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int64 `protobuf:"fixed64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Le *int64 `protobuf:"fixed64,3,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int64 `protobuf:"fixed64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Ge *int64 `protobuf:"fixed64,5,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*SFixed64Rules_Default
	//	*SFixed64Rules_DefaultFactory
	//	*SFixed64Rules_MissDefault
	//	*SFixed64Rules_Required
	//	*SFixed64Rules_DefaultTemplate
	DefaultConfig isSFixed64Rules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,14,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*SFixed64Rules_Example
	//	*SFixed64Rules_ExampleFactory
	ExampleConfig isSFixed64Rules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SFixed64Rules) Reset() {
	*x = SFixed64Rules{}
	mi := &file_p2p_validate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFixed64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed64Rules) ProtoMessage() {}

func (x *SFixed64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed64Rules.ProtoReflect.Descriptor instead.
func (*SFixed64Rules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{13}
}

func (x *SFixed64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SFixed64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SFixed64Rules) GetLe() int64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *SFixed64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SFixed64Rules) GetGe() int64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *SFixed64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SFixed64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SFixed64Rules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *SFixed64Rules) GetDefaultConfig() isSFixed64Rules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *SFixed64Rules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed64Rules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *SFixed64Rules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed64Rules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *SFixed64Rules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed64Rules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *SFixed64Rules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed64Rules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *SFixed64Rules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*SFixed64Rules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *SFixed64Rules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SFixed64Rules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SFixed64Rules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *SFixed64Rules) GetExampleConfig() isSFixed64Rules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *SFixed64Rules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SFixed64Rules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *SFixed64Rules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*SFixed64Rules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *SFixed64Rules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *SFixed64Rules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SFixed64Rules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SFixed64Rules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isSFixed64Rules_DefaultConfig interface {
	isSFixed64Rules_DefaultConfig()
}

type SFixed64Rules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type SFixed64Rules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type SFixed64Rules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type SFixed64Rules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type SFixed64Rules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*SFixed64Rules_Default) isSFixed64Rules_DefaultConfig() {}

func (*SFixed64Rules_DefaultFactory) isSFixed64Rules_DefaultConfig() {}

func (*SFixed64Rules_MissDefault) isSFixed64Rules_DefaultConfig() {}

func (*SFixed64Rules_Required) isSFixed64Rules_DefaultConfig() {}

func (*SFixed64Rules_DefaultTemplate) isSFixed64Rules_DefaultConfig() {}

type isSFixed64Rules_ExampleConfig interface {
	isSFixed64Rules_ExampleConfig()
}

type SFixed64Rules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type SFixed64Rules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*SFixed64Rules_Example) isSFixed64Rules_ExampleConfig() {}

func (*SFixed64Rules_ExampleFactory) isSFixed64Rules_ExampleConfig() {}

// BoolRules describes the constraints applied to `bool` values
type BoolRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *bool `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*BoolRules_Default
	//	*BoolRules_MissDefault
	//	*BoolRules_Required
	//	*BoolRules_DefaultTemplate
	DefaultConfig isBoolRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,5,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Set the corresponding sample value
	Example *bool `protobuf:"varint,7,opt,name=example,proto3,oneof" json:"example,omitempty"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,8,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,9,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	mi := &file_p2p_validate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRules.ProtoReflect.Descriptor instead.
func (*BoolRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{14}
}

func (x *BoolRules) GetConst() bool {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return false
}

func (x *BoolRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *BoolRules) GetDefaultConfig() isBoolRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *BoolRules) GetDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BoolRules_Default); ok {
			return x.Default
		}
	}
	return false
}

func (x *BoolRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BoolRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *BoolRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BoolRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *BoolRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BoolRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *BoolRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *BoolRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BoolRules) GetExample() bool {
	if x != nil && x.Example != nil {
		return *x.Example
	}
	return false
}

func (x *BoolRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *BoolRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *BoolRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BoolRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isBoolRules_DefaultConfig interface {
	isBoolRules_DefaultConfig()
}

type BoolRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default bool `protobuf:"varint,3,opt,name=default,proto3,oneof"`
}

type BoolRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type BoolRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type BoolRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*BoolRules_Default) isBoolRules_DefaultConfig() {}

func (*BoolRules_MissDefault) isBoolRules_DefaultConfig() {}

func (*BoolRules_Required) isBoolRules_DefaultConfig() {}

func (*BoolRules_DefaultTemplate) isBoolRules_DefaultConfig() {}

// StringRules describe the constraints applied to `string` values
type StringRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *string `protobuf:"bytes,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Len specifies that this field must be the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	Len *uint64 `protobuf:"varint,2,opt,name=len,proto3,oneof" json:"len,omitempty"`
	// MinLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a minimum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MinLength *uint64 `protobuf:"varint,3,opt,name=min_length,json=minLength,proto3,oneof" json:"min_length,omitempty"`
	// MaxLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a maximum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MaxLength *uint64 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
	// Pattern specifes that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern *string `protobuf:"bytes,5,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
	// Prefix specifies that this field must have the specified substring at
	// the beginning of the string.
	Prefix *string `protobuf:"bytes,6,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Suffix specifies that this field must have the specified substring at
	// the end of the string.
	Suffix *string `protobuf:"bytes,7,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// Contains specifies that this field must have the specified substring
	// anywhere in the string.
	Contains *string `protobuf:"bytes,8,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// NotContains specifies that this field cannot have the specified substring
	// anywhere in the string.
	NotContains *string `protobuf:"bytes,9,opt,name=not_contains,json=notContains,proto3,oneof" json:"not_contains,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []string `protobuf:"bytes,10,rep,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []string `protobuf:"bytes,11,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// WellKnown rules provide advanced constraints against common string
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//
	//	*StringRules_Email
	//	*StringRules_Hostname
	//	*StringRules_Ip
	//	*StringRules_Ipv4
	//	*StringRules_Ipv6
	//	*StringRules_Uri
	//	*StringRules_UriRef
	//	*StringRules_Address
	//	*StringRules_Uuid
	//	*StringRules_PydanticType
	WellKnown isStringRules_WellKnown `protobuf_oneof:"well_known"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,23,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*StringRules_Default
	//	*StringRules_DefaultFactory
	//	*StringRules_MissDefault
	//	*StringRules_Required
	//	*StringRules_DefaultTemplate
	DefaultConfig isStringRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,27,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,28,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*StringRules_Example
	//	*StringRules_ExampleFactory
	ExampleConfig isStringRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,32,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,33,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,34,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	mi := &file_p2p_validate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{15}
}

func (x *StringRules) GetConst() string {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return ""
}

func (x *StringRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *StringRules) GetMinLength() uint64 {
	if x != nil && x.MinLength != nil {
		return *x.MinLength
	}
	return 0
}

func (x *StringRules) GetMaxLength() uint64 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

func (x *StringRules) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *StringRules) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *StringRules) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *StringRules) GetContains() string {
	if x != nil && x.Contains != nil {
		return *x.Contains
	}
	return ""
}

func (x *StringRules) GetNotContains() string {
	if x != nil && x.NotContains != nil {
		return *x.NotContains
	}
	return ""
}

func (x *StringRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *StringRules) GetWellKnown() isStringRules_WellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

func (x *StringRules) GetEmail() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Email); ok {
			return x.Email
		}
	}
	return false
}

func (x *StringRules) GetHostname() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Hostname); ok {
			return x.Hostname
		}
	}
	return false
}

func (x *StringRules) GetIp() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ip); ok {
			return x.Ip
		}
	}
	return false
}

func (x *StringRules) GetIpv4() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv4); ok {
			return x.Ipv4
		}
	}
	return false
}

func (x *StringRules) GetIpv6() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv6); ok {
			return x.Ipv6
		}
	}
	return false
}

func (x *StringRules) GetUri() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Uri); ok {
			return x.Uri
		}
	}
	return false
}

func (x *StringRules) GetUriRef() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_UriRef); ok {
			return x.UriRef
		}
	}
	return false
}

func (x *StringRules) GetAddress() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Address); ok {
			return x.Address
		}
	}
	return false
}

func (x *StringRules) GetUuid() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Uuid); ok {
			return x.Uuid
		}
	}
	return false
}

func (x *StringRules) GetPydanticType() string {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_PydanticType); ok {
			return x.PydanticType
		}
	}
	return ""
}

func (x *StringRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *StringRules) GetDefaultConfig() isStringRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *StringRules) GetDefault() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*StringRules_Default); ok {
			return x.Default
		}
	}
	return ""
}

func (x *StringRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*StringRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *StringRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*StringRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *StringRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*StringRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *StringRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*StringRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *StringRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *StringRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StringRules) GetExampleConfig() isStringRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *StringRules) GetExample() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*StringRules_Example); ok {
			return x.Example
		}
	}
	return ""
}

func (x *StringRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*StringRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *StringRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *StringRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *StringRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *StringRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isStringRules_WellKnown interface {
	isStringRules_WellKnown()
}

type StringRules_Email struct {
	// Email specifies that the field must be a valid email address as
	// defined by RFC 5322
	Email bool `protobuf:"varint,12,opt,name=email,proto3,oneof"`
}

type StringRules_Hostname struct {
	// Hostname specifies that the field must be a valid hostname as
	// defined by RFC 1034. This constraint does not support
	// internationalized domain names (IDNs).
	Hostname bool `protobuf:"varint,13,opt,name=hostname,proto3,oneof"`
}

type StringRules_Ip struct {
	// Ip specifies that the field must be a valid IP (v4 or v6) address.
	// Valid IPv6 addresses should not include surrounding square brackets.
	Ip bool `protobuf:"varint,14,opt,name=ip,proto3,oneof"`
}

type StringRules_Ipv4 struct {
	// Ipv4 specifies that the field must be a valid IPv4 address.
	Ipv4 bool `protobuf:"varint,15,opt,name=ipv4,proto3,oneof"`
}

type StringRules_Ipv6 struct {
	// Ipv6 specifies that the field must be a valid IPv6 address. Valid
	// IPv6 addresses should not include surrounding square brackets.
	Ipv6 bool `protobuf:"varint,16,opt,name=ipv6,proto3,oneof"`
}

type StringRules_Uri struct {
	// Uri specifies that the field must be a valid, absolute URI as defined
	// by RFC 3986
	Uri bool `protobuf:"varint,17,opt,name=uri,proto3,oneof"`
}

type StringRules_UriRef struct {
	// UriRef specifies that the field must be a valid URI as defined by RFC
	// 3986 and may be relative or absolute.
	UriRef bool `protobuf:"varint,18,opt,name=uri_ref,json=uriRef,proto3,oneof"`
}

type StringRules_Address struct {
	// Address specifies that the field must be either a valid hostname as
	// defined by RFC 1034 (which does not support internationalized domain
	// names or IDNs), or it can be a valid IP (v4 or v6).
	Address bool `protobuf:"varint,21,opt,name=address,proto3,oneof"`
}

type StringRules_Uuid struct {
	// Uuid specifies that the field must be a valid UUID as defined by
	// RFC 4122
	Uuid bool `protobuf:"varint,22,opt,name=uuid,proto3,oneof"`
}

type StringRules_PydanticType struct {
	// If you want to use the property of pydantic.type, you can directly
	// set the value to the string of the corresponding property,
	// and then the program will automatically introduce the type of the corresponding string
	PydanticType string `protobuf:"bytes,99,opt,name=pydantic_type,json=pydanticType,proto3,oneof"`
}

func (*StringRules_Email) isStringRules_WellKnown() {}

func (*StringRules_Hostname) isStringRules_WellKnown() {}

func (*StringRules_Ip) isStringRules_WellKnown() {}

func (*StringRules_Ipv4) isStringRules_WellKnown() {}

func (*StringRules_Ipv6) isStringRules_WellKnown() {}

func (*StringRules_Uri) isStringRules_WellKnown() {}

func (*StringRules_UriRef) isStringRules_WellKnown() {}

func (*StringRules_Address) isStringRules_WellKnown() {}

func (*StringRules_Uuid) isStringRules_WellKnown() {}

func (*StringRules_PydanticType) isStringRules_WellKnown() {}

type isStringRules_DefaultConfig interface {
	isStringRules_DefaultConfig()
}

type StringRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default string `protobuf:"bytes,24,opt,name=default,proto3,oneof"`
}

type StringRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,25,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type StringRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,26,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type StringRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,35,opt,name=required,proto3,oneof"`
}

type StringRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,36,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*StringRules_Default) isStringRules_DefaultConfig() {}

func (*StringRules_DefaultFactory) isStringRules_DefaultConfig() {}

func (*StringRules_MissDefault) isStringRules_DefaultConfig() {}

func (*StringRules_Required) isStringRules_DefaultConfig() {}

func (*StringRules_DefaultTemplate) isStringRules_DefaultConfig() {}

type isStringRules_ExampleConfig interface {
	isStringRules_ExampleConfig()
}

type StringRules_Example struct {
	// Set the corresponding sample value
	Example string `protobuf:"bytes,30,opt,name=example,proto3,oneof"`
}

type StringRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,31,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*StringRules_Example) isStringRules_ExampleConfig() {}

func (*StringRules_ExampleFactory) isStringRules_ExampleConfig() {}

// BytesRules describe the constraints applied to `bytes` values
type BytesRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const []byte `protobuf:"bytes,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// MinLen specifies that this field must be the specified number of bytes
	// at a minimum
	MinLength *uint64 `protobuf:"varint,2,opt,name=min_length,json=minLength,proto3,oneof" json:"min_length,omitempty"`
	// MaxLen specifies that this field must be the specified number of bytes
	// at a maximum
	MaxLength *uint64 `protobuf:"varint,3,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
	// Prefix specifies that this field must have the specified bytes at the
	// beginning of the string.
	Prefix []byte `protobuf:"bytes,5,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Suffix specifies that this field must have the specified bytes at the
	// end of the string.
	Suffix []byte `protobuf:"bytes,6,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// Contains specifies that this field must have the specified bytes
	// anywhere in the string.
	Contains []byte `protobuf:"bytes,7,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In [][]byte `protobuf:"bytes,8,rep,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn [][]byte `protobuf:"bytes,9,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,10,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*BytesRules_Default
	//	*BytesRules_DefaultFactory
	//	*BytesRules_MissDefault
	//	*BytesRules_Required
	//	*BytesRules_DefaultTemplate
	DefaultConfig isBytesRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,14,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,15,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Corresponding multiple validation of the set value
	MultipleOf *float32 `protobuf:"fixed32,16,opt,name=multiple_of,json=multipleOf,proto3,oneof" json:"multiple_of,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*BytesRules_Example
	//	*BytesRules_ExampleFactory
	ExampleConfig isBytesRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,19,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,20,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// WellKnown rules provide advanced constraints against common byte
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//
	//	*BytesRules_Ip
	//	*BytesRules_Ipv4
	//	*BytesRules_Ipv6
	WellKnown isBytesRules_WellKnown `protobuf_oneof:"well_known"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,24,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,25,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesRules) Reset() {
	*x = BytesRules{}
	mi := &file_p2p_validate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRules) ProtoMessage() {}

func (x *BytesRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRules.ProtoReflect.Descriptor instead.
func (*BytesRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{16}
}

func (x *BytesRules) GetConst() []byte {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *BytesRules) GetMinLength() uint64 {
	if x != nil && x.MinLength != nil {
		return *x.MinLength
	}
	return 0
}

func (x *BytesRules) GetMaxLength() uint64 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

func (x *BytesRules) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BytesRules) GetSuffix() []byte {
	if x != nil {
		return x.Suffix
	}
	return nil
}

func (x *BytesRules) GetContains() []byte {
	if x != nil {
		return x.Contains
	}
	return nil
}

func (x *BytesRules) GetIn() [][]byte {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *BytesRules) GetNotIn() [][]byte {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *BytesRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *BytesRules) GetDefaultConfig() isBytesRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *BytesRules) GetDefault() []byte {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BytesRules_Default); ok {
			return x.Default
		}
	}
	return nil
}

func (x *BytesRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BytesRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *BytesRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BytesRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *BytesRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BytesRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *BytesRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*BytesRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *BytesRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *BytesRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BytesRules) GetMultipleOf() float32 {
	if x != nil && x.MultipleOf != nil {
		return *x.MultipleOf
	}
	return 0
}

func (x *BytesRules) GetExampleConfig() isBytesRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *BytesRules) GetExample() []byte {
	if x != nil {
		if x, ok := x.ExampleConfig.(*BytesRules_Example); ok {
			return x.Example
		}
	}
	return nil
}

func (x *BytesRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*BytesRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *BytesRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *BytesRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *BytesRules) GetWellKnown() isBytesRules_WellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

func (x *BytesRules) GetIp() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ip); ok {
			return x.Ip
		}
	}
	return false
}

func (x *BytesRules) GetIpv4() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ipv4); ok {
			return x.Ipv4
		}
	}
	return false
}

func (x *BytesRules) GetIpv6() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ipv6); ok {
			return x.Ipv6
		}
	}
	return false
}

func (x *BytesRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BytesRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isBytesRules_DefaultConfig interface {
	isBytesRules_DefaultConfig()
}

type BytesRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default []byte `protobuf:"bytes,11,opt,name=default,proto3,oneof"`
}

type BytesRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,12,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type BytesRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,13,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type BytesRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,26,opt,name=required,proto3,oneof"`
}

type BytesRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,36,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*BytesRules_Default) isBytesRules_DefaultConfig() {}

func (*BytesRules_DefaultFactory) isBytesRules_DefaultConfig() {}

func (*BytesRules_MissDefault) isBytesRules_DefaultConfig() {}

func (*BytesRules_Required) isBytesRules_DefaultConfig() {}

func (*BytesRules_DefaultTemplate) isBytesRules_DefaultConfig() {}

type isBytesRules_ExampleConfig interface {
	isBytesRules_ExampleConfig()
}

type BytesRules_Example struct {
	// Set the corresponding sample value
	Example []byte `protobuf:"bytes,17,opt,name=example,proto3,oneof"`
}

type BytesRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,18,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*BytesRules_Example) isBytesRules_ExampleConfig() {}

func (*BytesRules_ExampleFactory) isBytesRules_ExampleConfig() {}

type isBytesRules_WellKnown interface {
	isBytesRules_WellKnown()
}

type BytesRules_Ip struct {
	// Ip specifies that the field must be a valid IP (v4 or v6) address in
	// byte format
	Ip bool `protobuf:"varint,21,opt,name=ip,proto3,oneof"`
}

type BytesRules_Ipv4 struct {
	// Ipv4 specifies that the field must be a valid IPv4 address in byte
	// format
	Ipv4 bool `protobuf:"varint,22,opt,name=ipv4,proto3,oneof"`
}

type BytesRules_Ipv6 struct {
	// Ipv6 specifies that the field must be a valid IPv6 address in byte
	// format
	Ipv6 bool `protobuf:"varint,23,opt,name=ipv6,proto3,oneof"`
}

func (*BytesRules_Ip) isBytesRules_WellKnown() {}

func (*BytesRules_Ipv4) isBytesRules_WellKnown() {}

func (*BytesRules_Ipv6) isBytesRules_WellKnown() {}

// EnumRules describe the constraints applied to enum values
type EnumRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *int32 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"varint,3,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"varint,4,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*EnumRules_Default
	//	*EnumRules_DefaultFactory
	//	*EnumRules_MissDefault
	//	*EnumRules_Required
	//	*EnumRules_DefaultTemplate
	DefaultConfig isEnumRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*EnumRules_Example
	//	*EnumRules_ExampleFactory
	ExampleConfig isEnumRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,18,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumRules) Reset() {
	*x = EnumRules{}
	mi := &file_p2p_validate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRules) ProtoMessage() {}

func (x *EnumRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRules.ProtoReflect.Descriptor instead.
func (*EnumRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{17}
}

func (x *EnumRules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *EnumRules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *EnumRules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *EnumRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *EnumRules) GetDefaultConfig() isEnumRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *EnumRules) GetDefault() int32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*EnumRules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *EnumRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*EnumRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *EnumRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*EnumRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *EnumRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*EnumRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *EnumRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*EnumRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *EnumRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *EnumRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *EnumRules) GetExampleConfig() isEnumRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *EnumRules) GetExample() int32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*EnumRules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *EnumRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*EnumRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *EnumRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *EnumRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *EnumRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isEnumRules_DefaultConfig interface {
	isEnumRules_DefaultConfig()
}

type EnumRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default int32 `protobuf:"varint,9,opt,name=default,proto3,oneof"`
}

type EnumRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type EnumRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type EnumRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type EnumRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*EnumRules_Default) isEnumRules_DefaultConfig() {}

func (*EnumRules_DefaultFactory) isEnumRules_DefaultConfig() {}

func (*EnumRules_MissDefault) isEnumRules_DefaultConfig() {}

func (*EnumRules_Required) isEnumRules_DefaultConfig() {}

func (*EnumRules_DefaultTemplate) isEnumRules_DefaultConfig() {}

type isEnumRules_ExampleConfig interface {
	isEnumRules_ExampleConfig()
}

type EnumRules_Example struct {
	// Set the corresponding sample value
	Example int32 `protobuf:"varint,15,opt,name=example,proto3,oneof"`
}

type EnumRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*EnumRules_Example) isEnumRules_ExampleConfig() {}

func (*EnumRules_ExampleFactory) isEnumRules_ExampleConfig() {}

// MessageRules describe the constraints applied to embedded message values.
// For message-type fields, validation is performed recursively.
type MessageRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Skip specifies that the validation rules of this field should not be
	// evaluated
	Skip *bool `protobuf:"varint,1,opt,name=skip,proto3,oneof" json:"skip,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*MessageRules_Default
	//	*MessageRules_DefaultFactory
	//	*MessageRules_MissDefault
	//	*MessageRules_Required
	//	*MessageRules_DefaultTemplate
	DefaultConfig isMessageRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*MessageRules_Example
	//	*MessageRules_ExampleFactory
	ExampleConfig isMessageRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageRules) Reset() {
	*x = MessageRules{}
	mi := &file_p2p_validate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRules) ProtoMessage() {}

func (x *MessageRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRules.ProtoReflect.Descriptor instead.
func (*MessageRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{18}
}

func (x *MessageRules) GetSkip() bool {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return false
}

func (x *MessageRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *MessageRules) GetDefaultConfig() isMessageRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *MessageRules) GetDefault() float32 {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MessageRules_Default); ok {
			return x.Default
		}
	}
	return 0
}

func (x *MessageRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MessageRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *MessageRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MessageRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *MessageRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MessageRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *MessageRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MessageRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *MessageRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *MessageRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MessageRules) GetExampleConfig() isMessageRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *MessageRules) GetExample() float32 {
	if x != nil {
		if x, ok := x.ExampleConfig.(*MessageRules_Example); ok {
			return x.Example
		}
	}
	return 0
}

func (x *MessageRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*MessageRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *MessageRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *MessageRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MessageRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MessageRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isMessageRules_DefaultConfig interface {
	isMessageRules_DefaultConfig()
}

type MessageRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default float32 `protobuf:"fixed32,9,opt,name=default,proto3,oneof"`
}

type MessageRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type MessageRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type MessageRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,2,opt,name=required,proto3,oneof"`
}

type MessageRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*MessageRules_Default) isMessageRules_DefaultConfig() {}

func (*MessageRules_DefaultFactory) isMessageRules_DefaultConfig() {}

func (*MessageRules_MissDefault) isMessageRules_DefaultConfig() {}

func (*MessageRules_Required) isMessageRules_DefaultConfig() {}

func (*MessageRules_DefaultTemplate) isMessageRules_DefaultConfig() {}

type isMessageRules_ExampleConfig interface {
	isMessageRules_ExampleConfig()
}

type MessageRules_Example struct {
	// Set the corresponding sample value
	Example float32 `protobuf:"fixed32,15,opt,name=example,proto3,oneof"`
}

type MessageRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*MessageRules_Example) isMessageRules_ExampleConfig() {}

func (*MessageRules_ExampleFactory) isMessageRules_ExampleConfig() {}

// RepeatedRules describe the constraints applied to `repeated` values
type RepeatedRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems *uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3,oneof" json:"min_items,omitempty"`
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems *uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3,oneof" json:"max_items,omitempty"`
	// Unique specifies that all elements in this field must be unique. This
	// contraint is only applicable to scalar and enum types (messages are not
	// supported).
	Unique *bool `protobuf:"varint,3,opt,name=unique,proto3,oneof" json:"unique,omitempty"`
	// Items specifies the contraints to be applied to each item in the field.
	// Repeated message fields will still execute validation against each item
	// unless skip is specified here.
	Items *FieldRules `protobuf:"bytes,4,opt,name=items,proto3,oneof" json:"items,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*RepeatedRules_DefaultFactory
	//	*RepeatedRules_MissDefault
	//	*RepeatedRules_Required
	//	*RepeatedRules_DefaultTemplate
	DefaultConfig isRepeatedRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*RepeatedRules_ExampleFactory
	ExampleConfig isRepeatedRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedRules) Reset() {
	*x = RepeatedRules{}
	mi := &file_p2p_validate_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRules) ProtoMessage() {}

func (x *RepeatedRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRules.ProtoReflect.Descriptor instead.
func (*RepeatedRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{19}
}

func (x *RepeatedRules) GetMinItems() uint64 {
	if x != nil && x.MinItems != nil {
		return *x.MinItems
	}
	return 0
}

func (x *RepeatedRules) GetMaxItems() uint64 {
	if x != nil && x.MaxItems != nil {
		return *x.MaxItems
	}
	return 0
}

func (x *RepeatedRules) GetUnique() bool {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return false
}

func (x *RepeatedRules) GetItems() *FieldRules {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RepeatedRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *RepeatedRules) GetDefaultConfig() isRepeatedRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *RepeatedRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*RepeatedRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *RepeatedRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*RepeatedRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *RepeatedRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*RepeatedRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *RepeatedRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*RepeatedRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *RepeatedRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *RepeatedRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RepeatedRules) GetExampleConfig() isRepeatedRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *RepeatedRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*RepeatedRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *RepeatedRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *RepeatedRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *RepeatedRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RepeatedRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isRepeatedRules_DefaultConfig interface {
	isRepeatedRules_DefaultConfig()
}

type RepeatedRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type RepeatedRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type RepeatedRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type RepeatedRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*RepeatedRules_DefaultFactory) isRepeatedRules_DefaultConfig() {}

func (*RepeatedRules_MissDefault) isRepeatedRules_DefaultConfig() {}

func (*RepeatedRules_Required) isRepeatedRules_DefaultConfig() {}

func (*RepeatedRules_DefaultTemplate) isRepeatedRules_DefaultConfig() {}

type isRepeatedRules_ExampleConfig interface {
	isRepeatedRules_ExampleConfig()
}

type RepeatedRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*RepeatedRules_ExampleFactory) isRepeatedRules_ExampleConfig() {}

// MapRules describe the constraints applied to `map` values
type MapRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MinPairs specifies that this field must have the specified number of
	// KVs at a minimum
	MinPairs *uint64 `protobuf:"varint,1,opt,name=min_pairs,json=minPairs,proto3,oneof" json:"min_pairs,omitempty"`
	// MaxPairs specifies that this field must have the specified number of
	// KVs at a maximum
	MaxPairs *uint64 `protobuf:"varint,2,opt,name=max_pairs,json=maxPairs,proto3,oneof" json:"max_pairs,omitempty"`
	// Keys specifies the constraints to be applied to each key in the field.
	Keys *FieldRules `protobuf:"bytes,4,opt,name=keys,proto3,oneof" json:"keys,omitempty"`
	// Values specifies the constraints to be applied to the value of each key
	// in the field. Message values will still have their validations evaluated
	// unless skip is specified here.
	Values *FieldRules `protobuf:"bytes,5,opt,name=values,proto3,oneof" json:"values,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*MapRules_DefaultFactory
	//	*MapRules_MissDefault
	//	*MapRules_Required
	//	*MapRules_DefaultTemplate
	DefaultConfig isMapRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*MapRules_ExampleFactory
	ExampleConfig isMapRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapRules) Reset() {
	*x = MapRules{}
	mi := &file_p2p_validate_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRules) ProtoMessage() {}

func (x *MapRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRules.ProtoReflect.Descriptor instead.
func (*MapRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{20}
}

func (x *MapRules) GetMinPairs() uint64 {
	if x != nil && x.MinPairs != nil {
		return *x.MinPairs
	}
	return 0
}

func (x *MapRules) GetMaxPairs() uint64 {
	if x != nil && x.MaxPairs != nil {
		return *x.MaxPairs
	}
	return 0
}

func (x *MapRules) GetKeys() *FieldRules {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MapRules) GetValues() *FieldRules {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *MapRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *MapRules) GetDefaultConfig() isMapRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *MapRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MapRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *MapRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MapRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *MapRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MapRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *MapRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*MapRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *MapRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *MapRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MapRules) GetExampleConfig() isMapRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *MapRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*MapRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *MapRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *MapRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MapRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MapRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isMapRules_DefaultConfig interface {
	isMapRules_DefaultConfig()
}

type MapRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type MapRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type MapRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,21,opt,name=required,proto3,oneof"`
}

type MapRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*MapRules_DefaultFactory) isMapRules_DefaultConfig() {}

func (*MapRules_MissDefault) isMapRules_DefaultConfig() {}

func (*MapRules_Required) isMapRules_DefaultConfig() {}

func (*MapRules_DefaultTemplate) isMapRules_DefaultConfig() {}

type isMapRules_ExampleConfig interface {
	isMapRules_ExampleConfig()
}

type MapRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*MapRules_ExampleFactory) isMapRules_ExampleConfig() {}

// AnyRules describe constraints applied exclusively to the
// `google.protobuf.Any` well-known type
type AnyRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// In specifies that this field's `type_url` must be equal to one of the
	// specified values.
	In []string `protobuf:"bytes,2,rep,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field's `type_url` must not be equal to any of
	// the specified values.
	NotIn []string `protobuf:"bytes,3,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,8,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*AnyRules_Default
	//	*AnyRules_DefaultFactory
	//	*AnyRules_MissDefault
	//	*AnyRules_Required
	//	*AnyRules_DefaultTemplate
	DefaultConfig isAnyRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*AnyRules_Example
	//	*AnyRules_ExampleFactory
	ExampleConfig isAnyRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,16,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,17,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyRules) Reset() {
	*x = AnyRules{}
	mi := &file_p2p_validate_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyRules) ProtoMessage() {}

func (x *AnyRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyRules.ProtoReflect.Descriptor instead.
func (*AnyRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{21}
}

func (x *AnyRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *AnyRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *AnyRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *AnyRules) GetDefaultConfig() isAnyRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *AnyRules) GetDefault() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*AnyRules_Default); ok {
			return x.Default
		}
	}
	return ""
}

func (x *AnyRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*AnyRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *AnyRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*AnyRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *AnyRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*AnyRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *AnyRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*AnyRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *AnyRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *AnyRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AnyRules) GetExampleConfig() isAnyRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *AnyRules) GetExample() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*AnyRules_Example); ok {
			return x.Example
		}
	}
	return ""
}

func (x *AnyRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*AnyRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *AnyRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *AnyRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *AnyRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isAnyRules_DefaultConfig interface {
	isAnyRules_DefaultConfig()
}

type AnyRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default string `protobuf:"bytes,9,opt,name=default,proto3,oneof"`
}

type AnyRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type AnyRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type AnyRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,1,opt,name=required,proto3,oneof"`
}

type AnyRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*AnyRules_Default) isAnyRules_DefaultConfig() {}

func (*AnyRules_DefaultFactory) isAnyRules_DefaultConfig() {}

func (*AnyRules_MissDefault) isAnyRules_DefaultConfig() {}

func (*AnyRules_Required) isAnyRules_DefaultConfig() {}

func (*AnyRules_DefaultTemplate) isAnyRules_DefaultConfig() {}

type isAnyRules_ExampleConfig interface {
	isAnyRules_ExampleConfig()
}

type AnyRules_Example struct {
	// Set the corresponding sample value
	Example string `protobuf:"bytes,14,opt,name=example,proto3,oneof"`
}

type AnyRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,15,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*AnyRules_Example) isAnyRules_ExampleConfig() {}

func (*AnyRules_ExampleFactory) isAnyRules_ExampleConfig() {}

// DurationRules describe the constraints applied exclusively to the
// `google.protobuf.Duration` well-known type
type DurationRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *durationpb.Duration `protobuf:"bytes,2,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *durationpb.Duration `protobuf:"bytes,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// inclusive
	Le *durationpb.Duration `protobuf:"bytes,4,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive
	Gt *durationpb.Duration `protobuf:"bytes,5,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than the specified value,
	// inclusive
	Ge *durationpb.Duration `protobuf:"bytes,6,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []*durationpb.Duration `protobuf:"bytes,7,rep,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []*durationpb.Duration `protobuf:"bytes,8,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,14,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*DurationRules_Default
	//	*DurationRules_DefaultFactory
	//	*DurationRules_MissDefault
	//	*DurationRules_Required
	//	*DurationRules_DefaultTemplate
	DefaultConfig isDurationRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*DurationRules_Example
	//	*DurationRules_ExampleFactory
	ExampleConfig isDurationRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,17,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,18,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,19,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,20,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DurationRules) Reset() {
	*x = DurationRules{}
	mi := &file_p2p_validate_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationRules) ProtoMessage() {}

func (x *DurationRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationRules.ProtoReflect.Descriptor instead.
func (*DurationRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{22}
}

func (x *DurationRules) GetConst() *durationpb.Duration {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *DurationRules) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DurationRules) GetLe() *durationpb.Duration {
	if x != nil {
		return x.Le
	}
	return nil
}

func (x *DurationRules) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DurationRules) GetGe() *durationpb.Duration {
	if x != nil {
		return x.Ge
	}
	return nil
}

func (x *DurationRules) GetIn() []*durationpb.Duration {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DurationRules) GetNotIn() []*durationpb.Duration {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *DurationRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *DurationRules) GetDefaultConfig() isDurationRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *DurationRules) GetDefault() *durationpb.Duration {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DurationRules_Default); ok {
			return x.Default
		}
	}
	return nil
}

func (x *DurationRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DurationRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *DurationRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DurationRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *DurationRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DurationRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *DurationRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*DurationRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *DurationRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *DurationRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DurationRules) GetExampleConfig() isDurationRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *DurationRules) GetExample() *durationpb.Duration {
	if x != nil {
		if x, ok := x.ExampleConfig.(*DurationRules_Example); ok {
			return x.Example
		}
	}
	return nil
}

func (x *DurationRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*DurationRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *DurationRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *DurationRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DurationRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *DurationRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isDurationRules_DefaultConfig interface {
	isDurationRules_DefaultConfig()
}

type DurationRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default *durationpb.Duration `protobuf:"bytes,9,opt,name=default,proto3,oneof"`
}

type DurationRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,10,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type DurationRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,11,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type DurationRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,1,opt,name=required,proto3,oneof"`
}

type DurationRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*DurationRules_Default) isDurationRules_DefaultConfig() {}

func (*DurationRules_DefaultFactory) isDurationRules_DefaultConfig() {}

func (*DurationRules_MissDefault) isDurationRules_DefaultConfig() {}

func (*DurationRules_Required) isDurationRules_DefaultConfig() {}

func (*DurationRules_DefaultTemplate) isDurationRules_DefaultConfig() {}

type isDurationRules_ExampleConfig interface {
	isDurationRules_ExampleConfig()
}

type DurationRules_Example struct {
	// Set the corresponding sample value
	Example *durationpb.Duration `protobuf:"bytes,15,opt,name=example,proto3,oneof"`
}

type DurationRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,16,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*DurationRules_Example) isDurationRules_ExampleConfig() {}

func (*DurationRules_ExampleFactory) isDurationRules_ExampleConfig() {}

// TimestampRules describe the constraints applied exclusively to the
// `google.protobuf.Timestamp` well-known type
type TimestampRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Const specifies that this field must be exactly the specified value
	Const *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than the specified value,
	// inclusive
	Le *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=le,proto3,oneof" json:"le,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive
	Gt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than the specified value,
	// inclusive
	Ge *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ge,proto3,oneof" json:"ge,omitempty"`
	// LtNow specifies that this must be less than the current time. LtNow
	// can only be used with the Within rule.
	LtNow *bool `protobuf:"varint,7,opt,name=lt_now,json=ltNow,proto3,oneof" json:"lt_now,omitempty"`
	// GtNow specifies that this must be greater than the current time. GtNow
	// can only be used with the Within rule.
	GtNow *bool `protobuf:"varint,8,opt,name=gt_now,json=gtNow,proto3,oneof" json:"gt_now,omitempty"`
	// Within specifies that this field must be within this duration of the
	// current time. This constraint can be used alone or with the LtNow and
	// GtNow rules.
	Within *durationpb.Duration `protobuf:"bytes,9,opt,name=within,proto3,oneof" json:"within,omitempty"`
	// Whether to enable this field, if not, the generated Model will not carry this field
	Enable *bool `protobuf:"varint,10,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Types that are valid to be assigned to DefaultConfig:
	//
	//	*TimestampRules_Default
	//	*TimestampRules_DefaultFactory
	//	*TimestampRules_MissDefault
	//	*TimestampRules_Required
	//	*TimestampRules_DefaultTemplate
	DefaultConfig isTimestampRules_DefaultConfig `protobuf_oneof:"default_config"`
	// Set the alias of the field in the pydantic.Base Model
	Alias *string `protobuf:"bytes,14,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Set the description of the field
	Description *string `protobuf:"bytes,15,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to ExampleConfig:
	//
	//	*TimestampRules_Example
	//	*TimestampRules_ExampleFactory
	ExampleConfig isTimestampRules_ExampleConfig `protobuf_oneof:"example_config"`
	// Set the Field object corresponding to the field, support template variables
	Field *string `protobuf:"bytes,18,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// Set the type object corresponding to the field, support template variables
	Type *string `protobuf:"bytes,19,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The title corresponding to the field
	Title *string `protobuf:"bytes,20,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Field's custom extension parameter in the format Json
	Extra         *string `protobuf:"bytes,21,opt,name=extra,proto3,oneof" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimestampRules) Reset() {
	*x = TimestampRules{}
	mi := &file_p2p_validate_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRules) ProtoMessage() {}

func (x *TimestampRules) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_validate_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRules.ProtoReflect.Descriptor instead.
func (*TimestampRules) Descriptor() ([]byte, []int) {
	return file_p2p_validate_proto_rawDescGZIP(), []int{23}
}

func (x *TimestampRules) GetConst() *timestamppb.Timestamp {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *TimestampRules) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TimestampRules) GetLe() *timestamppb.Timestamp {
	if x != nil {
		return x.Le
	}
	return nil
}

func (x *TimestampRules) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TimestampRules) GetGe() *timestamppb.Timestamp {
	if x != nil {
		return x.Ge
	}
	return nil
}

func (x *TimestampRules) GetLtNow() bool {
	if x != nil && x.LtNow != nil {
		return *x.LtNow
	}
	return false
}

func (x *TimestampRules) GetGtNow() bool {
	if x != nil && x.GtNow != nil {
		return *x.GtNow
	}
	return false
}

func (x *TimestampRules) GetWithin() *durationpb.Duration {
	if x != nil {
		return x.Within
	}
	return nil
}

func (x *TimestampRules) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *TimestampRules) GetDefaultConfig() isTimestampRules_DefaultConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *TimestampRules) GetDefault() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.DefaultConfig.(*TimestampRules_Default); ok {
			return x.Default
		}
	}
	return nil
}

func (x *TimestampRules) GetDefaultFactory() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*TimestampRules_DefaultFactory); ok {
			return x.DefaultFactory
		}
	}
	return ""
}

func (x *TimestampRules) GetMissDefault() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*TimestampRules_MissDefault); ok {
			return x.MissDefault
		}
	}
	return false
}

func (x *TimestampRules) GetRequired() bool {
	if x != nil {
		if x, ok := x.DefaultConfig.(*TimestampRules_Required); ok {
			return x.Required
		}
	}
	return false
}

func (x *TimestampRules) GetDefaultTemplate() string {
	if x != nil {
		if x, ok := x.DefaultConfig.(*TimestampRules_DefaultTemplate); ok {
			return x.DefaultTemplate
		}
	}
	return ""
}

func (x *TimestampRules) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *TimestampRules) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TimestampRules) GetExampleConfig() isTimestampRules_ExampleConfig {
	if x != nil {
		return x.ExampleConfig
	}
	return nil
}

func (x *TimestampRules) GetExample() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.ExampleConfig.(*TimestampRules_Example); ok {
			return x.Example
		}
	}
	return nil
}

func (x *TimestampRules) GetExampleFactory() string {
	if x != nil {
		if x, ok := x.ExampleConfig.(*TimestampRules_ExampleFactory); ok {
			return x.ExampleFactory
		}
	}
	return ""
}

func (x *TimestampRules) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *TimestampRules) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *TimestampRules) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *TimestampRules) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type isTimestampRules_DefaultConfig interface {
	isTimestampRules_DefaultConfig()
}

type TimestampRules_Default struct {
	// The default value corresponding to the field, if not set,
	// the default value is the default value of the corresponding type of the field
	Default *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=default,proto3,oneof"`
}

type TimestampRules_DefaultFactory struct {
	// The default value factory function corresponding to the field, supports template variables,
	// such as `p2p@import|uuid|uuid4`
	DefaultFactory string `protobuf:"bytes,12,opt,name=default_factory,json=defaultFactory,proto3,oneof"`
}

type TimestampRules_MissDefault struct {
	// Set field required[Will be deprecated after version 1.0.0]
	MissDefault bool `protobuf:"varint,13,opt,name=miss_default,json=missDefault,proto3,oneof"`
}

type TimestampRules_Required struct {
	// Set field required
	Required bool `protobuf:"varint,1,opt,name=required,proto3,oneof"`
}

type TimestampRules_DefaultTemplate struct {
	// Similar meaning to `default`, but using template variables, such as `p2p@import|uuid|uuid4`
	DefaultTemplate string `protobuf:"bytes,22,opt,name=default_template,json=defaultTemplate,proto3,oneof"`
}

func (*TimestampRules_Default) isTimestampRules_DefaultConfig() {}

func (*TimestampRules_DefaultFactory) isTimestampRules_DefaultConfig() {}

func (*TimestampRules_MissDefault) isTimestampRules_DefaultConfig() {}

func (*TimestampRules_Required) isTimestampRules_DefaultConfig() {}

func (*TimestampRules_DefaultTemplate) isTimestampRules_DefaultConfig() {}

type isTimestampRules_ExampleConfig interface {
	isTimestampRules_ExampleConfig()
}

type TimestampRules_Example struct {
	// Set the corresponding sample value
	Example *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=example,proto3,oneof"`
}

type TimestampRules_ExampleFactory struct {
	// Set the corresponding sample value factory function, support template variables
	ExampleFactory string `protobuf:"bytes,17,opt,name=example_factory,json=exampleFactory,proto3,oneof"`
}

func (*TimestampRules_Example) isTimestampRules_ExampleConfig() {}

func (*TimestampRules_ExampleFactory) isTimestampRules_ExampleConfig() {}

var file_p2p_validate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1073,
		Name:          "p2p_validate.ignored",
		Tag:           "varint,1073,opt,name=ignored",
		Filename:      "p2p_validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1073,
		Name:          "p2p_validate.required",
		Tag:           "varint,1073,opt,name=required",
		Filename:      "p2p_validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofRules)(nil),
		Field:         1074,
		Name:          "p2p_validate.oneof_extend",
		Tag:           "bytes,1074,opt,name=oneof_extend",
		Filename:      "p2p_validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRules)(nil),
		Field:         1073,
		Name:          "p2p_validate.rules",
		Tag:           "bytes,1073,opt,name=rules",
		Filename:      "p2p_validate.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// Ignore skips generation of validation methods for this message.
	//
	// optional bool ignored = 1073;
	E_Ignored = &file_p2p_validate_proto_extTypes[0]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// Required ensures that exactly one the field options in a oneof is set;
	// validation fails if no fields in the oneof are set.
	//
	// optional bool required = 1073;
	E_Required = &file_p2p_validate_proto_extTypes[1]
	// optional p2p_validate.OneofRules oneof_extend = 1074;
	E_OneofExtend = &file_p2p_validate_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// Rules specify the validations to be performed on this field. By default,
	// no validation is performed against a field.
	//
	// optional p2p_validate.FieldRules rules = 1073;
	E_Rules = &file_p2p_validate_proto_extTypes[3]
)

var File_p2p_validate_proto protoreflect.FileDescriptor

var file_p2p_validate_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0xb1, 0x09, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x36, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2d,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x32,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xb5, 0x06, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04,
	0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb6, 0x06, 0x0a, 0x0b,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x02,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49,
	0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0xb5, 0x06, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb5, 0x06, 0x0a,
	0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x02,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49,
	0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0xb6, 0x06, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x02, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb6, 0x06,
	0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05,
	0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb6, 0x06, 0x0a, 0x0b, 0x53, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x48, 0x03, 0x52,
	0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x48, 0x06, 0x52, 0x02,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x11, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x11, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xb6, 0x06, 0x0a, 0x0b, 0x53, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x04, 0x52, 0x02, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12,
	0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x12, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x12, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x12, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb7, 0x06, 0x0a, 0x0c, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x48,
	0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x07, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10,
	0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x22, 0xb7, 0x06, 0x0a, 0x0c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x48,
	0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb8, 0x06, 0x0a,
	0x0d, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x48,
	0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0f, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x0a, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb8, 0x06, 0x0a, 0x0d, 0x53, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10,
	0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x10, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x10, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x10, 0x48,
	0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x10, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x10, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10,
	0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x22, 0x8e, 0x04, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0x81, 0x0a, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x03, 0x6c,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x19,
	0x0a, 0x07, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x72, 0x69, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x70,
	0x79, 0x64, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x79, 0x64, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b,
	0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x77, 0x65, 0x6c,
	0x6c, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xf5, 0x07, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0c, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x77, 0x65,
	0x6c, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xec, 0x04, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xe7,
	0x04, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd5, 0x05, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0xe7, 0x05, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x69, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xc6, 0x04, 0x0a, 0x08, 0x41,
	0x6e, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10,
	0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0xf5, 0x07, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x02, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x02, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x02, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb1, 0x08, 0x0a, 0x0e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52,
	0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04,
	0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x05, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x06, 0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x74, 0x5f,
	0x6e, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x05, 0x6c, 0x74, 0x4e,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x05, 0x67, 0x74, 0x4e, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x06, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x09, 0x52, 0x06,
	0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0f, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x67, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x3a,
	0x3d, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb1, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x3d,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb1, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x5e, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb2, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x51, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x32, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x61, 0x73, 0x2f, 0x6e, 0x61, 0x61, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x32, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_p2p_validate_proto_rawDescOnce sync.Once
	file_p2p_validate_proto_rawDescData []byte
)

func file_p2p_validate_proto_rawDescGZIP() []byte {
	file_p2p_validate_proto_rawDescOnce.Do(func() {
		file_p2p_validate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_validate_proto_rawDesc), len(file_p2p_validate_proto_rawDesc)))
	})
	return file_p2p_validate_proto_rawDescData
}

var file_p2p_validate_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_p2p_validate_proto_goTypes = []any{
	(*OneofRules)(nil),                  // 0: p2p_validate.OneofRules
	(*FieldRules)(nil),                  // 1: p2p_validate.FieldRules
	(*FloatRules)(nil),                  // 2: p2p_validate.FloatRules
	(*DoubleRules)(nil),                 // 3: p2p_validate.DoubleRules
	(*Int32Rules)(nil),                  // 4: p2p_validate.Int32Rules
	(*Int64Rules)(nil),                  // 5: p2p_validate.Int64Rules
	(*UInt32Rules)(nil),                 // 6: p2p_validate.UInt32Rules
	(*UInt64Rules)(nil),                 // 7: p2p_validate.UInt64Rules
	(*SInt32Rules)(nil),                 // 8: p2p_validate.SInt32Rules
	(*SInt64Rules)(nil),                 // 9: p2p_validate.SInt64Rules
	(*Fixed32Rules)(nil),                // 10: p2p_validate.Fixed32Rules
	(*Fixed64Rules)(nil),                // 11: p2p_validate.Fixed64Rules
	(*SFixed32Rules)(nil),               // 12: p2p_validate.SFixed32Rules
	(*SFixed64Rules)(nil),               // 13: p2p_validate.SFixed64Rules
	(*BoolRules)(nil),                   // 14: p2p_validate.BoolRules
	(*StringRules)(nil),                 // 15: p2p_validate.StringRules
	(*BytesRules)(nil),                  // 16: p2p_validate.BytesRules
	(*EnumRules)(nil),                   // 17: p2p_validate.EnumRules
	(*MessageRules)(nil),                // 18: p2p_validate.MessageRules
	(*RepeatedRules)(nil),               // 19: p2p_validate.RepeatedRules
	(*MapRules)(nil),                    // 20: p2p_validate.MapRules
	(*AnyRules)(nil),                    // 21: p2p_validate.AnyRules
	(*DurationRules)(nil),               // 22: p2p_validate.DurationRules
	(*TimestampRules)(nil),              // 23: p2p_validate.TimestampRules
	(*durationpb.Duration)(nil),         // 24: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 25: google.protobuf.Timestamp
	(*descriptorpb.MessageOptions)(nil), // 26: google.protobuf.MessageOptions
	(*descriptorpb.OneofOptions)(nil),   // 27: google.protobuf.OneofOptions
	(*descriptorpb.FieldOptions)(nil),   // 28: google.protobuf.FieldOptions
}
var file_p2p_validate_proto_depIdxs = []int32{
	18, // 0: p2p_validate.FieldRules.message:type_name -> p2p_validate.MessageRules
	2,  // 1: p2p_validate.FieldRules.float:type_name -> p2p_validate.FloatRules
	3,  // 2: p2p_validate.FieldRules.double:type_name -> p2p_validate.DoubleRules
	4,  // 3: p2p_validate.FieldRules.int32:type_name -> p2p_validate.Int32Rules
	5,  // 4: p2p_validate.FieldRules.int64:type_name -> p2p_validate.Int64Rules
	6,  // 5: p2p_validate.FieldRules.uint32:type_name -> p2p_validate.UInt32Rules
	7,  // 6: p2p_validate.FieldRules.uint64:type_name -> p2p_validate.UInt64Rules
	8,  // 7: p2p_validate.FieldRules.sint32:type_name -> p2p_validate.SInt32Rules
	9,  // 8: p2p_validate.FieldRules.sint64:type_name -> p2p_validate.SInt64Rules
	10, // 9: p2p_validate.FieldRules.fixed32:type_name -> p2p_validate.Fixed32Rules
	11, // 10: p2p_validate.FieldRules.fixed64:type_name -> p2p_validate.Fixed64Rules
	12, // 11: p2p_validate.FieldRules.sfixed32:type_name -> p2p_validate.SFixed32Rules
	13, // 12: p2p_validate.FieldRules.sfixed64:type_name -> p2p_validate.SFixed64Rules
	14, // 13: p2p_validate.FieldRules.bool:type_name -> p2p_validate.BoolRules
	15, // 14: p2p_validate.FieldRules.string:type_name -> p2p_validate.StringRules
	16, // 15: p2p_validate.FieldRules.bytes:type_name -> p2p_validate.BytesRules
	17, // 16: p2p_validate.FieldRules.enum:type_name -> p2p_validate.EnumRules
	19, // 17: p2p_validate.FieldRules.repeated:type_name -> p2p_validate.RepeatedRules
	20, // 18: p2p_validate.FieldRules.map:type_name -> p2p_validate.MapRules
	21, // 19: p2p_validate.FieldRules.any:type_name -> p2p_validate.AnyRules
	22, // 20: p2p_validate.FieldRules.duration:type_name -> p2p_validate.DurationRules
	23, // 21: p2p_validate.FieldRules.timestamp:type_name -> p2p_validate.TimestampRules
	1,  // 22: p2p_validate.RepeatedRules.items:type_name -> p2p_validate.FieldRules
	1,  // 23: p2p_validate.MapRules.keys:type_name -> p2p_validate.FieldRules
	1,  // 24: p2p_validate.MapRules.values:type_name -> p2p_validate.FieldRules
	24, // 25: p2p_validate.DurationRules.const:type_name -> google.protobuf.Duration
	24, // 26: p2p_validate.DurationRules.lt:type_name -> google.protobuf.Duration
	24, // 27: p2p_validate.DurationRules.le:type_name -> google.protobuf.Duration
	24, // 28: p2p_validate.DurationRules.gt:type_name -> google.protobuf.Duration
	24, // 29: p2p_validate.DurationRules.ge:type_name -> google.protobuf.Duration
	24, // 30: p2p_validate.DurationRules.in:type_name -> google.protobuf.Duration
	24, // 31: p2p_validate.DurationRules.not_in:type_name -> google.protobuf.Duration
	24, // 32: p2p_validate.DurationRules.default:type_name -> google.protobuf.Duration
	24, // 33: p2p_validate.DurationRules.example:type_name -> google.protobuf.Duration
	25, // 34: p2p_validate.TimestampRules.const:type_name -> google.protobuf.Timestamp
	25, // 35: p2p_validate.TimestampRules.lt:type_name -> google.protobuf.Timestamp
	25, // 36: p2p_validate.TimestampRules.le:type_name -> google.protobuf.Timestamp
	25, // 37: p2p_validate.TimestampRules.gt:type_name -> google.protobuf.Timestamp
	25, // 38: p2p_validate.TimestampRules.ge:type_name -> google.protobuf.Timestamp
	24, // 39: p2p_validate.TimestampRules.within:type_name -> google.protobuf.Duration
	25, // 40: p2p_validate.TimestampRules.default:type_name -> google.protobuf.Timestamp
	25, // 41: p2p_validate.TimestampRules.example:type_name -> google.protobuf.Timestamp
	26, // 42: p2p_validate.ignored:extendee -> google.protobuf.MessageOptions
	27, // 43: p2p_validate.required:extendee -> google.protobuf.OneofOptions
	27, // 44: p2p_validate.oneof_extend:extendee -> google.protobuf.OneofOptions
	28, // 45: p2p_validate.rules:extendee -> google.protobuf.FieldOptions
	0,  // 46: p2p_validate.oneof_extend:type_name -> p2p_validate.OneofRules
	1,  // 47: p2p_validate.rules:type_name -> p2p_validate.FieldRules
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	46, // [46:48] is the sub-list for extension type_name
	42, // [42:46] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_p2p_validate_proto_init() }
func file_p2p_validate_proto_init() {
	if File_p2p_validate_proto != nil {
		return
	}
	file_p2p_validate_proto_msgTypes[1].OneofWrappers = []any{
		(*FieldRules_Float)(nil),
		(*FieldRules_Double)(nil),
		(*FieldRules_Int32)(nil),
		(*FieldRules_Int64)(nil),
		(*FieldRules_Uint32)(nil),
		(*FieldRules_Uint64)(nil),
		(*FieldRules_Sint32)(nil),
		(*FieldRules_Sint64)(nil),
		(*FieldRules_Fixed32)(nil),
		(*FieldRules_Fixed64)(nil),
		(*FieldRules_Sfixed32)(nil),
		(*FieldRules_Sfixed64)(nil),
		(*FieldRules_Bool)(nil),
		(*FieldRules_String_)(nil),
		(*FieldRules_Bytes)(nil),
		(*FieldRules_Enum)(nil),
		(*FieldRules_Repeated)(nil),
		(*FieldRules_Map)(nil),
		(*FieldRules_Any)(nil),
		(*FieldRules_Duration)(nil),
		(*FieldRules_Timestamp)(nil),
	}
	file_p2p_validate_proto_msgTypes[2].OneofWrappers = []any{
		(*FloatRules_Default)(nil),
		(*FloatRules_DefaultFactory)(nil),
		(*FloatRules_MissDefault)(nil),
		(*FloatRules_Required)(nil),
		(*FloatRules_DefaultTemplate)(nil),
		(*FloatRules_Example)(nil),
		(*FloatRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[3].OneofWrappers = []any{
		(*DoubleRules_Default)(nil),
		(*DoubleRules_DefaultFactory)(nil),
		(*DoubleRules_MissDefault)(nil),
		(*DoubleRules_Required)(nil),
		(*DoubleRules_DefaultTemplate)(nil),
		(*DoubleRules_Example)(nil),
		(*DoubleRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[4].OneofWrappers = []any{
		(*Int32Rules_Default)(nil),
		(*Int32Rules_DefaultFactory)(nil),
		(*Int32Rules_MissDefault)(nil),
		(*Int32Rules_Required)(nil),
		(*Int32Rules_DefaultTemplate)(nil),
		(*Int32Rules_Example)(nil),
		(*Int32Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[5].OneofWrappers = []any{
		(*Int64Rules_Default)(nil),
		(*Int64Rules_DefaultFactory)(nil),
		(*Int64Rules_MissDefault)(nil),
		(*Int64Rules_Required)(nil),
		(*Int64Rules_DefaultTemplate)(nil),
		(*Int64Rules_Example)(nil),
		(*Int64Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[6].OneofWrappers = []any{
		(*UInt32Rules_Default)(nil),
		(*UInt32Rules_DefaultFactory)(nil),
		(*UInt32Rules_MissDefault)(nil),
		(*UInt32Rules_Required)(nil),
		(*UInt32Rules_DefaultTemplate)(nil),
		(*UInt32Rules_Example)(nil),
		(*UInt32Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[7].OneofWrappers = []any{
		(*UInt64Rules_Default)(nil),
		(*UInt64Rules_DefaultFactory)(nil),
		(*UInt64Rules_MissDefault)(nil),
		(*UInt64Rules_Required)(nil),
		(*UInt64Rules_DefaultTemplate)(nil),
		(*UInt64Rules_Example)(nil),
		(*UInt64Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[8].OneofWrappers = []any{
		(*SInt32Rules_Default)(nil),
		(*SInt32Rules_DefaultFactory)(nil),
		(*SInt32Rules_MissDefault)(nil),
		(*SInt32Rules_Required)(nil),
		(*SInt32Rules_DefaultTemplate)(nil),
		(*SInt32Rules_Example)(nil),
		(*SInt32Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[9].OneofWrappers = []any{
		(*SInt64Rules_Default)(nil),
		(*SInt64Rules_DefaultFactory)(nil),
		(*SInt64Rules_MissDefault)(nil),
		(*SInt64Rules_Required)(nil),
		(*SInt64Rules_DefaultTemplate)(nil),
		(*SInt64Rules_Example)(nil),
		(*SInt64Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[10].OneofWrappers = []any{
		(*Fixed32Rules_Default)(nil),
		(*Fixed32Rules_DefaultFactory)(nil),
		(*Fixed32Rules_MissDefault)(nil),
		(*Fixed32Rules_Required)(nil),
		(*Fixed32Rules_DefaultTemplate)(nil),
		(*Fixed32Rules_Example)(nil),
		(*Fixed32Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[11].OneofWrappers = []any{
		(*Fixed64Rules_Default)(nil),
		(*Fixed64Rules_DefaultFactory)(nil),
		(*Fixed64Rules_MissDefault)(nil),
		(*Fixed64Rules_Required)(nil),
		(*Fixed64Rules_DefaultTemplate)(nil),
		(*Fixed64Rules_Example)(nil),
		(*Fixed64Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[12].OneofWrappers = []any{
		(*SFixed32Rules_Default)(nil),
		(*SFixed32Rules_DefaultFactory)(nil),
		(*SFixed32Rules_MissDefault)(nil),
		(*SFixed32Rules_Required)(nil),
		(*SFixed32Rules_DefaultTemplate)(nil),
		(*SFixed32Rules_Example)(nil),
		(*SFixed32Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[13].OneofWrappers = []any{
		(*SFixed64Rules_Default)(nil),
		(*SFixed64Rules_DefaultFactory)(nil),
		(*SFixed64Rules_MissDefault)(nil),
		(*SFixed64Rules_Required)(nil),
		(*SFixed64Rules_DefaultTemplate)(nil),
		(*SFixed64Rules_Example)(nil),
		(*SFixed64Rules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[14].OneofWrappers = []any{
		(*BoolRules_Default)(nil),
		(*BoolRules_MissDefault)(nil),
		(*BoolRules_Required)(nil),
		(*BoolRules_DefaultTemplate)(nil),
	}
	file_p2p_validate_proto_msgTypes[15].OneofWrappers = []any{
		(*StringRules_Email)(nil),
		(*StringRules_Hostname)(nil),
		(*StringRules_Ip)(nil),
		(*StringRules_Ipv4)(nil),
		(*StringRules_Ipv6)(nil),
		(*StringRules_Uri)(nil),
		(*StringRules_UriRef)(nil),
		(*StringRules_Address)(nil),
		(*StringRules_Uuid)(nil),
		(*StringRules_PydanticType)(nil),
		(*StringRules_Default)(nil),
		(*StringRules_DefaultFactory)(nil),
		(*StringRules_MissDefault)(nil),
		(*StringRules_Required)(nil),
		(*StringRules_DefaultTemplate)(nil),
		(*StringRules_Example)(nil),
		(*StringRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[16].OneofWrappers = []any{
		(*BytesRules_Default)(nil),
		(*BytesRules_DefaultFactory)(nil),
		(*BytesRules_MissDefault)(nil),
		(*BytesRules_Required)(nil),
		(*BytesRules_DefaultTemplate)(nil),
		(*BytesRules_Example)(nil),
		(*BytesRules_ExampleFactory)(nil),
		(*BytesRules_Ip)(nil),
		(*BytesRules_Ipv4)(nil),
		(*BytesRules_Ipv6)(nil),
	}
	file_p2p_validate_proto_msgTypes[17].OneofWrappers = []any{
		(*EnumRules_Default)(nil),
		(*EnumRules_DefaultFactory)(nil),
		(*EnumRules_MissDefault)(nil),
		(*EnumRules_Required)(nil),
		(*EnumRules_DefaultTemplate)(nil),
		(*EnumRules_Example)(nil),
		(*EnumRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[18].OneofWrappers = []any{
		(*MessageRules_Default)(nil),
		(*MessageRules_DefaultFactory)(nil),
		(*MessageRules_MissDefault)(nil),
		(*MessageRules_Required)(nil),
		(*MessageRules_DefaultTemplate)(nil),
		(*MessageRules_Example)(nil),
		(*MessageRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[19].OneofWrappers = []any{
		(*RepeatedRules_DefaultFactory)(nil),
		(*RepeatedRules_MissDefault)(nil),
		(*RepeatedRules_Required)(nil),
		(*RepeatedRules_DefaultTemplate)(nil),
		(*RepeatedRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[20].OneofWrappers = []any{
		(*MapRules_DefaultFactory)(nil),
		(*MapRules_MissDefault)(nil),
		(*MapRules_Required)(nil),
		(*MapRules_DefaultTemplate)(nil),
		(*MapRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[21].OneofWrappers = []any{
		(*AnyRules_Default)(nil),
		(*AnyRules_DefaultFactory)(nil),
		(*AnyRules_MissDefault)(nil),
		(*AnyRules_Required)(nil),
		(*AnyRules_DefaultTemplate)(nil),
		(*AnyRules_Example)(nil),
		(*AnyRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[22].OneofWrappers = []any{
		(*DurationRules_Default)(nil),
		(*DurationRules_DefaultFactory)(nil),
		(*DurationRules_MissDefault)(nil),
		(*DurationRules_Required)(nil),
		(*DurationRules_DefaultTemplate)(nil),
		(*DurationRules_Example)(nil),
		(*DurationRules_ExampleFactory)(nil),
	}
	file_p2p_validate_proto_msgTypes[23].OneofWrappers = []any{
		(*TimestampRules_Default)(nil),
		(*TimestampRules_DefaultFactory)(nil),
		(*TimestampRules_MissDefault)(nil),
		(*TimestampRules_Required)(nil),
		(*TimestampRules_DefaultTemplate)(nil),
		(*TimestampRules_Example)(nil),
		(*TimestampRules_ExampleFactory)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_validate_proto_rawDesc), len(file_p2p_validate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_p2p_validate_proto_goTypes,
		DependencyIndexes: file_p2p_validate_proto_depIdxs,
		MessageInfos:      file_p2p_validate_proto_msgTypes,
		ExtensionInfos:    file_p2p_validate_proto_extTypes,
	}.Build()
	File_p2p_validate_proto = out.File
	file_p2p_validate_proto_goTypes = nil
	file_p2p_validate_proto_depIdxs = nil
}
