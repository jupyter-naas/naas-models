// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: space.proto

package space

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _space_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Space with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Space) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Space with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpaceMultiError, or nil if none found.
func (m *Space) ValidateAll() error {
	return m.validate(true)
}

func (m *Space) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
			err := SpaceValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Space_Name_Pattern.MatchString(m.GetName()) {
			err := SpaceValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.UserId != nil {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = SpaceValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Id != nil {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = SpaceValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CreatedAt != nil {

		if m.GetCreatedAt() <= 1673364229281 {
			err := SpaceValidationError{
				field:  "CreatedAt",
				reason: "value must be greater than 1673364229281",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Namespace != nil {

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = SpaceValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Cpu != nil {

		if m.GetCpu() <= 0 {
			err := SpaceValidationError{
				field:  "Cpu",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Memory != nil {

		if m.GetMemory() <= 0 {
			err := SpaceValidationError{
				field:  "Memory",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MinCount != nil {

		if m.GetMinCount() < 0 {
			err := SpaceValidationError{
				field:  "MinCount",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Domain != nil {

		if _, err := url.Parse(m.GetDomain()); err != nil {
			err = SpaceValidationError{
				field:  "Domain",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Image != nil {

		if !_Space_Image_Pattern.MatchString(m.GetImage()) {
			err := SpaceValidationError{
				field:  "Image",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9\\\\.\\\\/-]+([:][a-zA-Z0-9\\\\.\\\\/-]*)?$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Url != nil {

		if uri, err := url.Parse(m.GetUrl()); err != nil {
			err = SpaceValidationError{
				field:  "Url",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := SpaceValidationError{
				field:  "Url",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SpaceMultiError(errors)
	}

	return nil
}

func (m *Space) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Space) _validateUuid(uuid string) error {
	if matched := _space_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SpaceMultiError is an error wrapping multiple validation errors returned by
// Space.ValidateAll() if the designated constraints aren't met.
type SpaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceMultiError) AllErrors() []error { return m }

// SpaceValidationError is the validation error returned by Space.Validate if
// the designated constraints aren't met.
type SpaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceValidationError) ErrorName() string { return "SpaceValidationError" }

// Error satisfies the builtin error interface
func (e SpaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceValidationError{}

var _Space_Name_Pattern = regexp.MustCompile("^([A-Za-z0-9]+(-[A-Za-z0-9]+)+)$")

var _Space_Image_Pattern = regexp.MustCompile("^[a-zA-Z0-9\\.\\/-]+([:][a-zA-Z0-9\\.\\/-]*)?$")
