// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage.proto

package storage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Storage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Storage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Storage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StorageMultiError, or nil if none found.
func (m *Storage) ValidateAll() error {
	return m.validate(true)
}

func (m *Storage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return StorageMultiError(errors)
	}

	return nil
}

// StorageMultiError is an error wrapping multiple validation errors returned
// by Storage.ValidateAll() if the designated constraints aren't met.
type StorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageMultiError) AllErrors() []error { return m }

// StorageValidationError is the validation error returned by Storage.Validate
// if the designated constraints aren't met.
type StorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageValidationError) ErrorName() string { return "StorageValidationError" }

// Error satisfies the builtin error interface
func (e StorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectMultiError, or nil if none found.
func (m *Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Lastmodified != nil {
		// no validation rules for Lastmodified
	}

	if len(errors) > 0 {
		return ObjectMultiError(errors)
	}

	return nil
}

// ObjectMultiError is an error wrapping multiple validation errors returned by
// Object.ValidateAll() if the designated constraints aren't met.
type ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMultiError) AllErrors() []error { return m }

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on StorageResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageResponseErrorMultiError, or nil if none found.
func (m *StorageResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return StorageResponseErrorMultiError(errors)
	}

	return nil
}

// StorageResponseErrorMultiError is an error wrapping multiple validation
// errors returned by StorageResponseError.ValidateAll() if the designated
// constraints aren't met.
type StorageResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageResponseErrorMultiError) AllErrors() []error { return m }

// StorageResponseErrorValidationError is the validation error returned by
// StorageResponseError.Validate if the designated constraints aren't met.
type StorageResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageResponseErrorValidationError) ErrorName() string {
	return "StorageResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e StorageResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageResponseErrorValidationError{}

// Validate checks the field values on ObjectResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectResponseErrorMultiError, or nil if none found.
func (m *ObjectResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return ObjectResponseErrorMultiError(errors)
	}

	return nil
}

// ObjectResponseErrorMultiError is an error wrapping multiple validation
// errors returned by ObjectResponseError.ValidateAll() if the designated
// constraints aren't met.
type ObjectResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectResponseErrorMultiError) AllErrors() []error { return m }

// ObjectResponseErrorValidationError is the validation error returned by
// ObjectResponseError.Validate if the designated constraints aren't met.
type ObjectResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectResponseErrorValidationError) ErrorName() string {
	return "ObjectResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectResponseErrorValidationError{}

// Validate checks the field values on ObjectStorageCredentialsResponseError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ObjectStorageCredentialsResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageCredentialsResponseError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ObjectStorageCredentialsResponseErrorMultiError, or nil if none found.
func (m *ObjectStorageCredentialsResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageCredentialsResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return ObjectStorageCredentialsResponseErrorMultiError(errors)
	}

	return nil
}

// ObjectStorageCredentialsResponseErrorMultiError is an error wrapping
// multiple validation errors returned by
// ObjectStorageCredentialsResponseError.ValidateAll() if the designated
// constraints aren't met.
type ObjectStorageCredentialsResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageCredentialsResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageCredentialsResponseErrorMultiError) AllErrors() []error { return m }

// ObjectStorageCredentialsResponseErrorValidationError is the validation error
// returned by ObjectStorageCredentialsResponseError.Validate if the
// designated constraints aren't met.
type ObjectStorageCredentialsResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageCredentialsResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageCredentialsResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageCredentialsResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageCredentialsResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageCredentialsResponseErrorValidationError) ErrorName() string {
	return "ObjectStorageCredentialsResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageCredentialsResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageCredentialsResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageCredentialsResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageCredentialsResponseErrorValidationError{}

// Validate checks the field values on StorageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageListRequestMultiError, or nil if none found.
func (m *StorageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageListRequestMultiError(errors)
	}

	return nil
}

// StorageListRequestMultiError is an error wrapping multiple validation errors
// returned by StorageListRequest.ValidateAll() if the designated constraints
// aren't met.
type StorageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageListRequestMultiError) AllErrors() []error { return m }

// StorageListRequestValidationError is the validation error returned by
// StorageListRequest.Validate if the designated constraints aren't met.
type StorageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageListRequestValidationError) ErrorName() string {
	return "StorageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageListRequestValidationError{}

// Validate checks the field values on StorageListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageListResponseMultiError, or nil if none found.
func (m *StorageListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStorage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListResponseValidationError{
						field:  fmt.Sprintf("Storage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListResponseValidationError{
						field:  fmt.Sprintf("Storage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListResponseValidationError{
					field:  fmt.Sprintf("Storage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageListResponseMultiError(errors)
	}

	return nil
}

// StorageListResponseMultiError is an error wrapping multiple validation
// errors returned by StorageListResponse.ValidateAll() if the designated
// constraints aren't met.
type StorageListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageListResponseMultiError) AllErrors() []error { return m }

// StorageListResponseValidationError is the validation error returned by
// StorageListResponse.Validate if the designated constraints aren't met.
type StorageListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageListResponseValidationError) ErrorName() string {
	return "StorageListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageListResponseValidationError{}

// Validate checks the field values on StorageCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageCreateRequestMultiError, or nil if none found.
func (m *StorageCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageCreateRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageCreateRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageCreateRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageCreateRequestMultiError(errors)
	}

	return nil
}

// StorageCreateRequestMultiError is an error wrapping multiple validation
// errors returned by StorageCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageCreateRequestMultiError) AllErrors() []error { return m }

// StorageCreateRequestValidationError is the validation error returned by
// StorageCreateRequest.Validate if the designated constraints aren't met.
type StorageCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageCreateRequestValidationError) ErrorName() string {
	return "StorageCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageCreateRequestValidationError{}

// Validate checks the field values on StorageCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageCreateResponseMultiError, or nil if none found.
func (m *StorageCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageCreateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageCreateResponseMultiError(errors)
	}

	return nil
}

// StorageCreateResponseMultiError is an error wrapping multiple validation
// errors returned by StorageCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type StorageCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageCreateResponseMultiError) AllErrors() []error { return m }

// StorageCreateResponseValidationError is the validation error returned by
// StorageCreateResponse.Validate if the designated constraints aren't met.
type StorageCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageCreateResponseValidationError) ErrorName() string {
	return "StorageCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageCreateResponseValidationError{}

// Validate checks the field values on StorageDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageDeleteRequestMultiError, or nil if none found.
func (m *StorageDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageDeleteRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageDeleteRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageDeleteRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageDeleteRequestMultiError(errors)
	}

	return nil
}

// StorageDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by StorageDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageDeleteRequestMultiError) AllErrors() []error { return m }

// StorageDeleteRequestValidationError is the validation error returned by
// StorageDeleteRequest.Validate if the designated constraints aren't met.
type StorageDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageDeleteRequestValidationError) ErrorName() string {
	return "StorageDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageDeleteRequestValidationError{}

// Validate checks the field values on StorageDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageDeleteResponseMultiError, or nil if none found.
func (m *StorageDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageDeleteResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageDeleteResponseMultiError(errors)
	}

	return nil
}

// StorageDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by StorageDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type StorageDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageDeleteResponseMultiError) AllErrors() []error { return m }

// StorageDeleteResponseValidationError is the validation error returned by
// StorageDeleteResponse.Validate if the designated constraints aren't met.
type StorageDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageDeleteResponseValidationError) ErrorName() string {
	return "StorageDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageDeleteResponseValidationError{}

// Validate checks the field values on StorageListObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageListObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageListObjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageListObjectRequestMultiError, or nil if none found.
func (m *StorageListObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageListObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListObjectRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListObjectRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListObjectRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListObjectRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListObjectRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListObjectRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageListObjectRequestMultiError(errors)
	}

	return nil
}

// StorageListObjectRequestMultiError is an error wrapping multiple validation
// errors returned by StorageListObjectRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageListObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageListObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageListObjectRequestMultiError) AllErrors() []error { return m }

// StorageListObjectRequestValidationError is the validation error returned by
// StorageListObjectRequest.Validate if the designated constraints aren't met.
type StorageListObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageListObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageListObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageListObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageListObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageListObjectRequestValidationError) ErrorName() string {
	return "StorageListObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageListObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageListObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageListObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageListObjectRequestValidationError{}

// Validate checks the field values on StorageListObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageListObjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageListObjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageListObjectResponseMultiError, or nil if none found.
func (m *StorageListObjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageListObjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetObject() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListObjectResponseValidationError{
						field:  fmt.Sprintf("Object[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListObjectResponseValidationError{
						field:  fmt.Sprintf("Object[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListObjectResponseValidationError{
					field:  fmt.Sprintf("Object[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageListObjectResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageListObjectResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageListObjectResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageListObjectResponseMultiError(errors)
	}

	return nil
}

// StorageListObjectResponseMultiError is an error wrapping multiple validation
// errors returned by StorageListObjectResponse.ValidateAll() if the
// designated constraints aren't met.
type StorageListObjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageListObjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageListObjectResponseMultiError) AllErrors() []error { return m }

// StorageListObjectResponseValidationError is the validation error returned by
// StorageListObjectResponse.Validate if the designated constraints aren't met.
type StorageListObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageListObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageListObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageListObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageListObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageListObjectResponseValidationError) ErrorName() string {
	return "StorageListObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageListObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageListObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageListObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageListObjectResponseValidationError{}

// Validate checks the field values on ObjectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectCreateRequestMultiError, or nil if none found.
func (m *ObjectCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectCreateRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectCreateRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectCreateRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectCreateRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectCreateRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectCreateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectCreateRequestMultiError(errors)
	}

	return nil
}

// ObjectCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectCreateRequestMultiError) AllErrors() []error { return m }

// ObjectCreateRequestValidationError is the validation error returned by
// ObjectCreateRequest.Validate if the designated constraints aren't met.
type ObjectCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectCreateRequestValidationError) ErrorName() string {
	return "ObjectCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectCreateRequestValidationError{}

// Validate checks the field values on ObjectCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectCreateResponseMultiError, or nil if none found.
func (m *ObjectCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectCreateResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectCreateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectCreateResponseMultiError(errors)
	}

	return nil
}

// ObjectCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ObjectCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ObjectCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectCreateResponseMultiError) AllErrors() []error { return m }

// ObjectCreateResponseValidationError is the validation error returned by
// ObjectCreateResponse.Validate if the designated constraints aren't met.
type ObjectCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectCreateResponseValidationError) ErrorName() string {
	return "ObjectCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectCreateResponseValidationError{}

// Validate checks the field values on ObjectListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectListRequestMultiError, or nil if none found.
func (m *ObjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectListRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectListRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectListRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectListRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectListRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectListRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectListRequestMultiError(errors)
	}

	return nil
}

// ObjectListRequestMultiError is an error wrapping multiple validation errors
// returned by ObjectListRequest.ValidateAll() if the designated constraints
// aren't met.
type ObjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectListRequestMultiError) AllErrors() []error { return m }

// ObjectListRequestValidationError is the validation error returned by
// ObjectListRequest.Validate if the designated constraints aren't met.
type ObjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectListRequestValidationError) ErrorName() string {
	return "ObjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectListRequestValidationError{}

// Validate checks the field values on ObjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectListResponseMultiError, or nil if none found.
func (m *ObjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetObject() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectListResponseValidationError{
						field:  fmt.Sprintf("Object[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectListResponseValidationError{
						field:  fmt.Sprintf("Object[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectListResponseValidationError{
					field:  fmt.Sprintf("Object[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectListResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectListResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectListResponseMultiError(errors)
	}

	return nil
}

// ObjectListResponseMultiError is an error wrapping multiple validation errors
// returned by ObjectListResponse.ValidateAll() if the designated constraints
// aren't met.
type ObjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectListResponseMultiError) AllErrors() []error { return m }

// ObjectListResponseValidationError is the validation error returned by
// ObjectListResponse.Validate if the designated constraints aren't met.
type ObjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectListResponseValidationError) ErrorName() string {
	return "ObjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectListResponseValidationError{}

// Validate checks the field values on ObjectGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectGetRequestMultiError, or nil if none found.
func (m *ObjectGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectGetRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectGetRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectGetRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectGetRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectGetRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectGetRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectGetRequestMultiError(errors)
	}

	return nil
}

// ObjectGetRequestMultiError is an error wrapping multiple validation errors
// returned by ObjectGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ObjectGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectGetRequestMultiError) AllErrors() []error { return m }

// ObjectGetRequestValidationError is the validation error returned by
// ObjectGetRequest.Validate if the designated constraints aren't met.
type ObjectGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectGetRequestValidationError) ErrorName() string { return "ObjectGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ObjectGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectGetRequestValidationError{}

// Validate checks the field values on ObjectGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectGetResponseMultiError, or nil if none found.
func (m *ObjectGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectGetResponseValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectGetResponseValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectGetResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectGetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectGetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectGetResponseMultiError(errors)
	}

	return nil
}

// ObjectGetResponseMultiError is an error wrapping multiple validation errors
// returned by ObjectGetResponse.ValidateAll() if the designated constraints
// aren't met.
type ObjectGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectGetResponseMultiError) AllErrors() []error { return m }

// ObjectGetResponseValidationError is the validation error returned by
// ObjectGetResponse.Validate if the designated constraints aren't met.
type ObjectGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectGetResponseValidationError) ErrorName() string {
	return "ObjectGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectGetResponseValidationError{}

// Validate checks the field values on ObjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectDeleteRequestMultiError, or nil if none found.
func (m *ObjectDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Object != nil {

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectDeleteRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectDeleteRequestValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectDeleteRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectDeleteRequestMultiError(errors)
	}

	return nil
}

// ObjectDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectDeleteRequestMultiError) AllErrors() []error { return m }

// ObjectDeleteRequestValidationError is the validation error returned by
// ObjectDeleteRequest.Validate if the designated constraints aren't met.
type ObjectDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectDeleteRequestValidationError) ErrorName() string {
	return "ObjectDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectDeleteRequestValidationError{}

// Validate checks the field values on ObjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectDeleteResponseMultiError, or nil if none found.
func (m *ObjectDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectDeleteResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectDeleteResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectDeleteResponseMultiError(errors)
	}

	return nil
}

// ObjectDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ObjectDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ObjectDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectDeleteResponseMultiError) AllErrors() []error { return m }

// ObjectDeleteResponseValidationError is the validation error returned by
// ObjectDeleteResponse.Validate if the designated constraints aren't met.
type ObjectDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectDeleteResponseValidationError) ErrorName() string {
	return "ObjectDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectDeleteResponseValidationError{}

// Validate checks the field values on ObjectStorageS3Credentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageS3Credentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageS3Credentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStorageS3CredentialsMultiError, or nil if none found.
func (m *ObjectStorageS3Credentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageS3Credentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.EndpointUrl != nil {
		// no validation rules for EndpointUrl
	}

	if m.RegionName != nil {
		// no validation rules for RegionName
	}

	if m.AccessKeyId != nil {
		// no validation rules for AccessKeyId
	}

	if m.SecretKey != nil {
		// no validation rules for SecretKey
	}

	if m.SessionToken != nil {
		// no validation rules for SessionToken
	}

	if m.Expiration != nil {
		// no validation rules for Expiration
	}

	if len(errors) > 0 {
		return ObjectStorageS3CredentialsMultiError(errors)
	}

	return nil
}

// ObjectStorageS3CredentialsMultiError is an error wrapping multiple
// validation errors returned by ObjectStorageS3Credentials.ValidateAll() if
// the designated constraints aren't met.
type ObjectStorageS3CredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageS3CredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageS3CredentialsMultiError) AllErrors() []error { return m }

// ObjectStorageS3CredentialsValidationError is the validation error returned
// by ObjectStorageS3Credentials.Validate if the designated constraints aren't met.
type ObjectStorageS3CredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageS3CredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageS3CredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageS3CredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageS3CredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageS3CredentialsValidationError) ErrorName() string {
	return "ObjectStorageS3CredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageS3CredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageS3Credentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageS3CredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageS3CredentialsValidationError{}

// Validate checks the field values on ObjectStorageAzureCredentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageAzureCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageAzureCredentials with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectStorageAzureCredentialsMultiError, or nil if none found.
func (m *ObjectStorageAzureCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageAzureCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.EndpointUrl != nil {
		// no validation rules for EndpointUrl
	}

	if m.AccessKeyId != nil {
		// no validation rules for AccessKeyId
	}

	if m.SecretKey != nil {
		// no validation rules for SecretKey
	}

	if len(errors) > 0 {
		return ObjectStorageAzureCredentialsMultiError(errors)
	}

	return nil
}

// ObjectStorageAzureCredentialsMultiError is an error wrapping multiple
// validation errors returned by ObjectStorageAzureCredentials.ValidateAll()
// if the designated constraints aren't met.
type ObjectStorageAzureCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageAzureCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageAzureCredentialsMultiError) AllErrors() []error { return m }

// ObjectStorageAzureCredentialsValidationError is the validation error
// returned by ObjectStorageAzureCredentials.Validate if the designated
// constraints aren't met.
type ObjectStorageAzureCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageAzureCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageAzureCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageAzureCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageAzureCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageAzureCredentialsValidationError) ErrorName() string {
	return "ObjectStorageAzureCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageAzureCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageAzureCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageAzureCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageAzureCredentialsValidationError{}

// Validate checks the field values on ObjectStorageCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageCredentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStorageCredentialsMultiError, or nil if none found.
func (m *ObjectStorageCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetS3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectStorageCredentialsValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectStorageCredentialsValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectStorageCredentialsValidationError{
				field:  "S3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectStorageCredentialsMultiError(errors)
	}

	return nil
}

// ObjectStorageCredentialsMultiError is an error wrapping multiple validation
// errors returned by ObjectStorageCredentials.ValidateAll() if the designated
// constraints aren't met.
type ObjectStorageCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageCredentialsMultiError) AllErrors() []error { return m }

// ObjectStorageCredentialsValidationError is the validation error returned by
// ObjectStorageCredentials.Validate if the designated constraints aren't met.
type ObjectStorageCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageCredentialsValidationError) ErrorName() string {
	return "ObjectStorageCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageCredentialsValidationError{}

// Validate checks the field values on ObjectStorageCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectStorageCredentialsRequestMultiError, or nil if none found.
func (m *ObjectStorageCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Storage != nil {

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectStorageCredentialsRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectStorageCredentialsRequestValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectStorageCredentialsRequestValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectStorageCredentialsRequestMultiError(errors)
	}

	return nil
}

// ObjectStorageCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectStorageCredentialsRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectStorageCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageCredentialsRequestMultiError) AllErrors() []error { return m }

// ObjectStorageCredentialsRequestValidationError is the validation error
// returned by ObjectStorageCredentialsRequest.Validate if the designated
// constraints aren't met.
type ObjectStorageCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageCredentialsRequestValidationError) ErrorName() string {
	return "ObjectStorageCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageCredentialsRequestValidationError{}

// Validate checks the field values on ObjectStorageCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectStorageCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectStorageCredentialsResponseMultiError, or nil if none found.
func (m *ObjectStorageCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Credentials != nil {

		if all {
			switch v := interface{}(m.GetCredentials()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectStorageCredentialsResponseValidationError{
						field:  "Credentials",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectStorageCredentialsResponseValidationError{
						field:  "Credentials",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectStorageCredentialsResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectStorageCredentialsResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectStorageCredentialsResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectStorageCredentialsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectStorageCredentialsResponseMultiError(errors)
	}

	return nil
}

// ObjectStorageCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ObjectStorageCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type ObjectStorageCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageCredentialsResponseMultiError) AllErrors() []error { return m }

// ObjectStorageCredentialsResponseValidationError is the validation error
// returned by ObjectStorageCredentialsResponse.Validate if the designated
// constraints aren't met.
type ObjectStorageCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageCredentialsResponseValidationError) ErrorName() string {
	return "ObjectStorageCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageCredentialsResponseValidationError{}
